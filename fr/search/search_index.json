{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"English \u0420\u0443\u0441\u0441\u043a\u0438\u0439 Deutsch \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 Fran\u00e7ais Espa\u00f1ol"},{"location":"#introduction","title":"Introduction","text":"<p>La biblioth\u00e8que TRegExpr impl\u00e9mente les expressions r\u00e9guli\u00e8res.</p> <p>Les expressions r\u00e9guli\u00e8res sont un outil facile \u00e0 utiliser et puissant pour la recherche sophistiqu\u00e9e et la substitution ainsi que pour la v\u00e9rification de texte bas\u00e9e sur des mod\u00e8les.</p> <p>Elles sont particuli\u00e8rement utiles pour la validation des saisies des utilisateurs dans les formulaires - pour valider les adresses e-mail, etc.</p> <p>Vous pouvez \u00e9galement extraire des num\u00e9ros de t\u00e9l\u00e9phone, des codes ZIP, etc. \u00e0 partir de pages web ou de documents, rechercher des motifs complexes dans des fichiers journaux et tout ce que vous pouvez imaginer. Les r\u00e8gles (mod\u00e8les) peuvent \u00eatre chang\u00e9es sans devoir recompiler votre programme.</p> <p>TRegExpr est impl\u00e9ment\u00e9e en Pascal pur. Elle est incluse dans Lazarus (Free Pascal) : paquet. Mais elle existe \u00e9galement comme biblioth\u00e8que s\u00e9par\u00e9e et peut \u00eatre compil\u00e9e par Delphi 2-7, Borland C++ Builder 3-6.</p> <p>Quel bon accueil la biblioth\u00e8que a-t-elle re\u00e7u.</p>"},{"location":"#demarrage-rapide","title":"D\u00e9marrage rapide","text":"<p>Pour utiliser la biblioth\u00e8que, ajoutez simplement les sources \u00e0 votre projet et utilisez la classe TRegExpr.</p> <p>Dans la FAQ, vous pouvez apprendre des probl\u00e8mes des autres utilisateurs.</p> <p>L'application Windows pr\u00eate \u00e0 l'emploi REStudio vous aidera \u00e0 apprendre et \u00e0 d\u00e9boguer les expressions r\u00e9guli\u00e8res.</p> <p>Si vous voyez des probl\u00e8mes, veuillez cr\u00e9er le bug.</p>"},{"location":"#traductions","title":"Traductions","text":"<p>La documentation a \u00e9t\u00e9 traduite en anglais et en russe.</p> <p>Il existe des traductions incompl\u00e8tes dans plusieurs autres langues. Si vous souhaitez aider \u00e0 les compl\u00e9ter, contactez-moi.</p>"},{"location":"#gratitude","title":"Gratitude","text":"<p>De nombreuses fonctionnalit\u00e9s ont \u00e9t\u00e9 sugg\u00e9r\u00e9es et beaucoup de bugs ont \u00e9t\u00e9 trouv\u00e9s (et m\u00eame corrig\u00e9s) par les contributeurs de TRegExpr.</p> <p>Je ne peux pas tous les \u00e9num\u00e9rer ici, mais j'appr\u00e9cie tous les rapports de bug, les suggestions de fonctionnalit\u00e9s et les questions que je re\u00e7ois de votre part.</p> <ul> <li>Alexey Torgashin - principal contributeur depuis 2019, par ex. </li> <li>groupes nomm\u00e9s, groupes non capturants, assertions, recherche arri\u00e8re et bien plus</li> <li>Guido Muehlwitz - a trouv\u00e9 et corrig\u00e9 un vilain bug dans le traitement des grandes cha\u00eenes</li> <li>Stephan Klimek - tests dans C++Builder et suggestion/mise en \u0153uvre de nombreuses fonctionnalit\u00e9s</li> <li>Steve Mudford - a impl\u00e9ment\u00e9 le param\u00e8tre Offset</li> <li>Martin Baur (www.mindpower.com) - traduction en allemand, suggestions utiles</li> <li>Yury Finkel - a impl\u00e9ment\u00e9 le support Unicode, trouv\u00e9 et corrig\u00e9 certains bugs</li> <li>Ralf Junker - a impl\u00e9ment\u00e9 certaines fonctionnalit\u00e9s, de nombreuses suggestions d'optimisation</li> <li>Simeon Lilov - traduction bulgare</li> <li>Filip Jirs\u0431k et Matthew Winter - aide \u00e0 l'impl\u00e9mentation du mode non gourmand</li> <li>Kit Eason - de nombreux exemples pour la section d'aide \u00e0 l'introduction</li> <li>Juergen Schroth - chasse aux bugs et suggestions utiles</li> <li>Martin Ledoux - traduction en fran\u00e7ais</li> <li>Diego Calp, Argentine - traduction en espagnol</li> </ul>"},{"location":"demos/","title":"D\u00e9mos","text":"<p>Code de d\u00e9monstration pour TRegExpr</p>"},{"location":"demos/#introduction","title":"introduction","text":"<p>If you don't familiar with regular expression, please, take a look at the r.e.syntax.</p> <p>TRegExpr interface described in TRegExpr interface.</p>"},{"location":"demos/#text2html","title":"Text2HTML","text":"<p>Sources Text2HTML</p> <p>Publier du texte brut au format HTML</p> <p>Uses unit HyperLinksDecorator that is based on TRegExpr. \u00a0 Cette unit\u00e9 contient des fonctions pour d\u00e9corer des hyperliens.</p> <p>For example, replaces <code>www.sorokin.engineer</code> with <code>&lt;a href=\"http://www.sorokin.engineer\"&gt;www.sorokin.engineer&lt;/a&gt;</code> or <code>filbert@yandex.ru</code> with <code>&lt;a href=\"mailto:filbert@yandex.ru\"&gt;filbert@yandex.ru&lt;/a&gt;</code>. \u00a0 .. code-block:: pascal</p> <p>function DecorateURLs ( const AText : string; AFlags : TDecorateURLsFlagSet = [durlAddr, durlPath]</p> <p>) : string;</p> <p>type TDecorateURLsFlags = ( durlProto, durlAddr, durlPort, durlPath, durlBMark, durlParam);</p> <p>TDecorateURLsFlagSet = set of TDecorateURLsFlags;</p> <p>function DecorateEMails (const AText : string) : string; \u00a0</p> Valeur Sens durlProto Protocole (comme <code>ftp: //</code> ou <code>http: //</code>) durlAddr \u00a0 Adresse TCP ou nom de domaine (comme <code>sorokin.engineer</code>) durlPort \u00a0 Num\u00e9ro de port si sp\u00e9cifi\u00e9 (comme <code>: 8080</code>) durlPath \u00a0 Chemin du document (comme <code>index.html</code>) durlBMark Marque-page (comme <code># mark</code>) durlParam Param\u00e8tres d'URL (comme <code>? ID = 2 &amp;amp; User = 13</code>) <p>Retourne le texte saisi <code>AText</code> avec des hyperliens d\u00e9cor\u00e9s.</p> <p><code>AFlags</code> describes, which parts of hyper-link must be included into visible part of the link.</p> <p>For example, if AFlags is <code>[durlAddr]</code> then hyper link <code>www.sorokin.engineer/contacts.htm</code> will be decorated as <code>&lt;a href=\"www.sorokin.engineer/contacts.htm\"&gt;www.sorokin.engineer&lt;/a&gt;</code>.</p>"},{"location":"demos/#tregexprroutines","title":"TRegExprRoutines","text":"<p>Exemples tr\u00e8s simples, voir les commentaires \u00e0 l'int\u00e9rieur de l'unit\u00e9</p>"},{"location":"demos/#tregexprclass","title":"TRegExprClass","text":"<p>Exemples l\u00e9g\u00e8rement plus complexes, voir les commentaires \u00e0 l'int\u00e9rieur de l'unit\u00e9</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#jai-trouve-un-bug-terrible-tregexpr-provoque-une-exception-de-violation-dacces","title":"J'ai trouv\u00e9 un bug terrible : TRegExpr provoque une exception de violation d'acc\u00e8s !","text":"<p>R\u00e9ponse</p> <p>Vous devez cr\u00e9er l'objet avant de l'utiliser. Ainsi, apr\u00e8s avoir d\u00e9clar\u00e9 quelque chose comme :</p> <pre><code>r : TRegExpr\n</code></pre> <p>n'oubliez pas de cr\u00e9er l'instance de l'objet :</p> <pre><code>r := TRegExpr.Create.\n</code></pre>"},{"location":"faq/#est-ce-quil-supporte-lunicode","title":"Est-ce qu'il supporte l'Unicode ?","text":"<p>R\u00e9ponse</p> <p>Comment utiliser l'Unicode</p>"},{"location":"faq/#pourquoi-tregexpr-retourne-plus-dune-ligne","title":"Pourquoi TRegExpr retourne plus d'une ligne ?","text":"<p>Par exemple, r.e. <code>&lt;font .\\*&gt;</code> retourne le premier <code>&lt;font</code>, puis le reste du fichier incluant le dernier <code>&lt;/html&gt;</code>.</p> <p>R\u00e9ponse</p> <p>Pour la compatibilit\u00e9 ascendante, le modificateur /s est <code>Activ\u00e9</code> par d\u00e9faut.</p> <p>D\u00e9sactivez-le et <code>.</code> correspondra \u00e0 tout sauf aux s\u00e9parateurs de ligne - exactement comme vous le souhaitez.</p> <p>D'ailleurs, je sugg\u00e8re <code>&lt;font ([^\\n&gt;]*)&gt;</code>, dans <code>Match[1]</code> sera l'URL.</p>"},{"location":"faq/#pourquoi-tregexpr-retourne-plus-que-ce-que-jattends","title":"Pourquoi TRegExpr retourne plus que ce que j'attends ?","text":"<p>Par exemple, r.e. <code>&lt;p&gt;(.+)&lt;/p&gt;</code> appliqu\u00e9 \u00e0 la cha\u00eene <code>&lt;p&gt;a&lt;/p&gt;&lt;p&gt;b&lt;/p&gt;</code> retourne <code>a&lt;/p&gt;&lt;p&gt;b</code> mais pas <code>a</code> comme je l'attendais.</p> <p>R\u00e9ponse</p> <p>Par d\u00e9faut, tous les op\u00e9rateurs fonctionnent en mode <code>gourmand</code>, donc ils correspondent autant que possible.</p> <p>Si vous voulez un mode <code>non gourmand</code>, vous pouvez utiliser des op\u00e9rateurs non gourmands comme <code>+?</code> etc. ou passer tous les op\u00e9rateurs en mode non gourmand avec l'aide du modificateur <code>g</code> (utilisez les propri\u00e9t\u00e9s appropri\u00e9es de TRegExpr ou l'op\u00e9rateur <code>?(-g)</code> dans r.e.).</p>"},{"location":"faq/#comment-parser-des-sources-comme-html-avec-laide-de-tregexpr","title":"Comment parser des sources comme HTML avec l'aide de TRegExpr ?","text":"<p>R\u00e9ponse</p> <p>D\u00e9sol\u00e9, mais c'est presque impossible !</p> <p>Bien s\u00fbr, vous pouvez facilement utiliser TRegExpr pour extraire certaines informations de HTML, comme montr\u00e9 dans mes exemples, mais si vous voulez un parsing pr\u00e9cis, vous devez utiliser un vrai parseur, pas r.e.</p> <p>Vous pouvez lire l'explication compl\u00e8te dans le <code>Perl Cookbook</code> de Tom Christiansen et Nathan Torkington, par exemple.</p> <p>En bref - il y a de nombreuses structures qui peuvent \u00eatre facilement pars\u00e9es par un vrai parseur mais pas du tout par r.e., et le vrai parseur est beaucoup plus rapide pour faire le parsing, car r.e. ne se contente pas de scanner le flux d'entr\u00e9e, il effectue une recherche d'optimisation qui peut prendre beaucoup de temps.</p>"},{"location":"faq/#y-a-t-il-un-moyen-dobtenir-plusieurs-correspondances-dun-motif-sur-tregexpr","title":"Y a-t-il un moyen d'obtenir plusieurs correspondances d'un motif sur TRegExpr ?","text":"<p>R\u00e9ponse</p> <p>Vous pouvez it\u00e9rer les correspondances avec la m\u00e9thode ExecNext.</p> <p>Si vous voulez un exemple, veuillez consulter l'impl\u00e9mentation de la m\u00e9thode <code>TRegExpr.Replace</code> ou les exemples pour HyperLinksDecorator</p>"},{"location":"faq/#je-verifie-lentree-de-lutilisateur-pourquoi-tregexpr-retourne-vrai-pour-des-chaines-dentree-incorrectes","title":"Je v\u00e9rifie l'entr\u00e9e de l'utilisateur. Pourquoi TRegExpr retourne <code>Vrai</code> pour des cha\u00eenes d'entr\u00e9e incorrectes ?","text":"<p>R\u00e9ponse</p> <p>Dans de nombreux cas, les utilisateurs de TRegExpr oublient que l'expression r\u00e9guli\u00e8re est destin\u00e9e \u00e0 rechercher dans la cha\u00eene d'entr\u00e9e.</p> <p>Donc, par exemple, si vous utilisez l'expression <code>\\d{4,4}</code>, vous aurez du succ\u00e8s pour des entr\u00e9es utilisateur incorrectes comme <code>12345</code> ou <code>n'importe quelles lettres 1234</code>.</p> <p>Vous devez v\u00e9rifier du d\u00e9but \u00e0 la fin de la ligne pour vous assurer qu'il n'y a rien d'autre autour : <code>^\\d{4,4}$</code>.</p>"},{"location":"faq/#pourquoi-les-iterateurs-non-gourmands-fonctionnent-parfois-en-mode-gourmand","title":"Pourquoi les it\u00e9rateurs non gourmands fonctionnent parfois en mode gourmand ?","text":"<p>Par exemple, le r.e. <code>a+?,b+?</code> appliqu\u00e9 \u00e0 la cha\u00eene <code>aaa,bbb</code> correspond \u00e0 <code>aaa,b</code>, mais ne devrait-il pas correspondre \u00e0 <code>a,b</code> en raison de la non-gourmandise du premier it\u00e9rateur ?</p> <p>R\u00e9ponse</p> <p>Cela est d\u00fb \u00e0 la mani\u00e8re de fonctionner de TRegExpr. En fait, beaucoup d'autres moteurs r.e. fonctionnent exactement de la m\u00eame mani\u00e8re : ils n'effectuent qu'une <code>simple</code> optimisation de recherche, et n'essaient pas de faire la meilleure optimisation.</p> <p>Dans certains cas, c'est mauvais, mais en g\u00e9n\u00e9ral, c'est plut\u00f4t un avantage qu'une limitation, pour des raisons de performance et de pr\u00e9visibilit\u00e9.</p> <p>La r\u00e8gle principale - r.e. essaie d'abord de correspondre \u00e0 partir de l'endroit actuel et seulement si cela est compl\u00e8tement impossible, il avance d'un caract\u00e8re et essaie \u00e0 nouveau \u00e0 partir de la position suivante dans le texte.</p> <p>Ainsi, si vous utilisez <code>a,b+?</code> cela correspondra \u00e0 <code>a,b</code>. Dans le cas de <code>a+?,b+?</code> c'est maintenant d\u00e9conseill\u00e9 (nous ajoutons le modificateur non gourmand) mais il est toujours possible de correspondre \u00e0 plus d'un <code>a</code>, donc TRegExpr le fera.</p> <p>TRegExpr comme les r.e. de Perl ou d'Unix n'essaient pas d'avancer et de v\u00e9rifier - serait-ce une meilleure correspondance. Tout d'abord, simplement parce qu'il n'y a aucun moyen de dire qu'une correspondance est meilleure ou pire.</p>"},{"location":"faq/#comment-puis-je-utiliser-tregexpr-avec-borland-c-builder","title":"Comment puis-je utiliser TRegExpr avec Borland C++ Builder ?","text":"<p>J'ai un probl\u00e8me car aucun fichier d'en-t\u00eate (<code>.h</code> ou <code>.hpp</code>) n'est disponible.</p> <p>R\u00e9ponse</p> <ul> <li>Ajoutez <code>RegExpr.pas</code> au projet <code>bcb</code>.</li> <li>Compilez le projet. Cela g\u00e9n\u00e8re le fichier d'en-t\u00eate <code>RegExpr.hpp</code>.</li> <li>Maintenant, vous pouvez \u00e9crire du code qui utilise l'unit\u00e9 <code>RegExpr</code>.</li> <li>N'oubliez pas d'ajouter <code>#include \u201cRegExpr.hpp\u201d</code> l\u00e0 o\u00f9 c'est n\u00e9cessaire.</li> <li>N'oubliez pas de remplacer tous les <code>\\</code> dans les expressions r\u00e9guli\u00e8res par <code>\\\\</code> ou de red\u00e9finir la constante EscChar.</li> </ul>"},{"location":"faq/#pourquoi-de-nombreux-re-y-compris-les-re-de-laide-et-de-la-demo-de-tregexpr-fonctionnent-mal-dans-borland-c-builder","title":"Pourquoi de nombreux r.e. (y compris les r.e. de l'aide et de la d\u00e9mo de TRegExpr) fonctionnent mal dans Borland C++ Builder ?","text":"<p>R\u00e9ponse</p> <p>L'astuce est dans la question pr\u00e9c\u00e9dente ;) Le symbole <code>\\</code> a une signification  sp\u00e9ciale en <code>C++</code>, donc vous devez l'<code>\u00e9chapper</code> (comme d\u00e9crit dans la r\u00e9ponse pr\u00e9c\u00e9dente).  Mais si vous n'aimez pas les r.e. comme <code>\\\\w+\\\\w+\\\\.\\\\w+</code> vous pouvez red\u00e9finir la  constante <code>EscChar</code> (dans <code>RegExpr.pas</code>). </p> <p>Par exemple <code>EscChar = \"/\"</code>.  Alors vous pouvez \u00e9crire <code>/w+/w+/./w+</code>, cela semble inhabituel mais est plus lisible.</p>"},{"location":"regular_expressions/","title":"Expressions r\u00e9guli\u00e8res (RegEx)","text":""},{"location":"regular_expressions/#introduction","title":"Introduction","text":"<p>Les expressions r\u00e9guli\u00e8res sont un moyen pratique de sp\u00e9cifier des mod\u00e8les de texte.</p> <p>Avec les expressions r\u00e9guli\u00e8res, vous pouvez valider des entr\u00e9es utilisateur, rechercher certains motifs comme des emails ou des num\u00e9ros de t\u00e9l\u00e9phone sur des pages web ou dans des documents, etc.</p> <p>Ci-dessous se trouve la feuille de triche compl\u00e8te pour les expressions r\u00e9guli\u00e8res.</p>"},{"location":"regular_expressions/#caracteres","title":"Caract\u00e8res","text":""},{"location":"regular_expressions/#correspondances-simples","title":"Correspondances simples","text":"<p>Tout caract\u00e8re unique (\u00e0 l'exception des caract\u00e8res sp\u00e9ciaux de regex) correspond \u00e0 lui-m\u00eame. Une s\u00e9rie de caract\u00e8res (non sp\u00e9ciaux) correspond \u00e0 cette s\u00e9rie de caract\u00e8res dans la cha\u00eene d'entr\u00e9e.</p> RegEx Correspondances <code>foobar</code> <code>foobar</code>"},{"location":"regular_expressions/#caracteres-non-imprimables-codes-dechappement","title":"Caract\u00e8res non imprimables (codes d'\u00e9chappement)","text":"<p>Pour sp\u00e9cifier un caract\u00e8re par son code Unicode, utilisez le pr\u00e9fixe <code>\\x</code> suivi du code hexad\u00e9cimal. Pour un code de 3-4 chiffres (apr\u00e8s U+00FF), encadrez le code entre accolades.</p> RegEx Correspondances <code>\\xAB</code> caract\u00e8re avec le code hexad\u00e9cimal <code>AB</code> de 2 chiffres <code>\\x{AB20}</code> caract\u00e8re avec le code hexad\u00e9cimal <code>AB20</code> de 1..4 chiffres <code>foo\\x20bar</code> <code>foo bar</code> (notez l'espace au milieu) <p>Il existe un certain nombre de codes d'\u00e9chappement pr\u00e9d\u00e9finis pour les caract\u00e8res non imprimables, comme dans le langage C :</p> RegEx Correspondances <code>\\t</code> tabulation (HT/TAB), \u00e9quivalent \u00e0 <code>\\x09</code> <code>\\n</code> saut de ligne (LF), \u00e9quivalent \u00e0 <code>\\x0a</code> <code>\\r</code> retour chariot (CR), \u00e9quivalent \u00e0 <code>\\x0d</code> <code>\\f</code> alimentation en formulaire (FF), \u00e9quivalent \u00e0 <code>\\x0c</code> <code>\\a</code> alarme (BEL), \u00e9quivalent \u00e0 <code>\\x07</code> <code>\\e</code> \u00e9chappement (ESC), \u00e9quivalent \u00e0 <code>\\x1b</code> <code>\\cA</code> ... <code>\\cZ</code> chr(0) \u00e0 chr(25). Par exemple, <code>\\cI</code> correspond au caract\u00e8re de tabulation. Les lettres minuscules \"a\"...\"z\" sont \u00e9galement prises en charge."},{"location":"regular_expressions/#echappement","title":"\u00c9chappement","text":"<p>Pour repr\u00e9senter un caract\u00e8re sp\u00e9cial de regex (un de <code>.+*?|\\()[]{}^$</code>), pr\u00e9fixez-le avec un antislash <code>\\</code>. L'antislash litt\u00e9ral doit \u00e9galement \u00eatre \u00e9chapp\u00e9.</p> RegEx Correspondances <code>\\^FooBarPtr</code> <code>^FooBarPtr</code>, ceci est <code>^</code> et non le d\u00e9but de ligne <code>\\[a\\]</code> <code>[a]</code>, ceci n'est pas une classe de caract\u00e8re"},{"location":"regular_expressions/#classes-de-caracteres","title":"Classes de caract\u00e8res","text":""},{"location":"regular_expressions/#classes-de-caracteres-utilisateur","title":"Classes de caract\u00e8res utilisateur","text":"<p>Une classe de caract\u00e8res est une liste de caract\u00e8res \u00e0 l'int\u00e9rieur des crochets <code>[]</code>. La classe correspond \u00e0 tout caract\u00e8re unique list\u00e9 dans cette classe.</p> RegEx Correspondances <code>foob[aeiou]r</code> <code>foobar</code>, <code>foober</code>, etc. mais pas <code>foobbr</code>, <code>foobcr</code> <p>Vous pouvez \"inverser\" la classe - si le premier caract\u00e8re apr\u00e8s le <code>[</code> est <code>^</code>, alors la classe correspond \u00e0 tout caract\u00e8re sauf les caract\u00e8res list\u00e9s dans la classe.</p> RegEx Correspondances <code>foob[^aeiou]r</code> <code>foobbr</code>, <code>foobcr</code>, etc. mais pas <code>foobar</code>, <code>foober</code> <p>Dans une liste, le caract\u00e8re tiret <code>-</code> est utilis\u00e9 pour sp\u00e9cifier une plage, de sorte que <code>a-z</code> repr\u00e9sente tous les caract\u00e8res entre <code>a</code> et <code>z</code>, inclus.</p> <p>Si vous voulez que le tiret <code>-</code> lui-m\u00eame soit membre d'une classe, placez-le au d\u00e9but ou \u00e0 la fin de la liste, ou \u00e9chappez le avec un antislash.</p> <p>Si vous voulez que <code>]</code> fasse partie de la classe, vous pouvez le placer au d\u00e9but de la liste ou l'\u00e9chapper avec un antislash.</p> RegEx Correspondances <code>[-az]</code> <code>a</code>, <code>z</code> et <code>-</code> <code>[az-]</code> <code>a</code>, <code>z</code> et <code>-</code> <code>[a\\-z]</code> <code>a</code>, <code>z</code> et <code>-</code> <code>[a-z]</code> caract\u00e8res de <code>a</code> \u00e0 <code>z</code> <code>[\\n-\\x0D]</code> caract\u00e8res de chr(10) \u00e0 chr(13)"},{"location":"regular_expressions/#meta-caractere-point","title":"M\u00e9ta-caract\u00e8re point","text":"<p>Le m\u00e9ta-caract\u00e8re <code>.</code> (point) correspond par d\u00e9faut \u00e0 tout caract\u00e8re. Mais si vous d\u00e9sactivez le modificateur /s, alors il ne correspondra pas aux caract\u00e8res de saut de ligne.</p> <p>Le <code>.</code> ne fonctionne pas comme m\u00e9ta-classe \u00e0 l'int\u00e9rieur des classes de caract\u00e8res utilisateur. <code>[.]</code> signifie un \".\" litt\u00e9ral.</p>"},{"location":"regular_expressions/#meta-classes","title":"M\u00e9ta-classes","text":"<p>Il existe un certain nombre de classes de caract\u00e8res pr\u00e9d\u00e9finies qui rendent les expressions r\u00e9guli\u00e8res plus compactes, \"m\u00e9ta-classes\" :</p> RegEx Correspondances <code>\\w</code> un caract\u00e8re alphanum\u00e9rique, y compris <code>_</code> <code>\\W</code> un non-alphanum\u00e9rique <code>\\d</code> un caract\u00e8re num\u00e9rique (comme <code>[0-9]</code>) <code>\\D</code> un non-num\u00e9rique <code>\\s</code> un espace (comme <code>[ \\t\\n\\r\\f]</code>) <code>\\S</code> un non-espace <code>\\h</code> espace horizontal : la tabulation et tous les caract\u00e8res dans la cat\u00e9gorie \"s\u00e9parateur d'espace\" de Unicode <code>\\H</code> pas un espace horizontal <code>\\v</code> espace vertical : tous les caract\u00e8res trait\u00e9s comme des sauts de ligne dans la norme Unicode <code>\\V</code> pas un espace vertical <code>\\R</code> saut de ligne Unicode : LF, paire CR LF, CR, FF (saut de page), VT (tabulation verticale), U+0085, U+2028, U+2029 <p>Vous pouvez utiliser toutes les m\u00e9ta-classes mentionn\u00e9es dans le tableau ci-dessus dans les classes de caract\u00e8res utilisateur.</p> RegEx Correspondances <code>foob\\dr</code> <code>foob1r</code>, <code>foob6r</code>, etc. mais pas <code>foobar</code>, <code>foobbr</code>, etc. <code>foob[\\w\\s]r</code> <code>foobar</code>, <code>foob r</code>, <code>foobbr</code>, etc. mais pas <code>foob1r</code>, <code>foob=r</code>, etc. <p>TRegExpr</p> <p>Les propri\u00e9t\u00e9s SpaceChars et WordChars d\u00e9finissent les classes de caract\u00e8res <code>\\w</code>, <code>\\W</code>, <code>\\s</code>, <code>\\S</code>.</p> <p>Vous pouvez donc red\u00e9finir ces classes.</p>"},{"location":"regular_expressions/#limites","title":"Limites","text":""},{"location":"regular_expressions/#limites-de-ligne","title":"Limites de ligne","text":"M\u00e9ta-caract\u00e8re Correspondances <code>^</code> correspondance de longueur z\u00e9ro au d\u00e9but de ligne <code>$</code> correspondance de longueur z\u00e9ro \u00e0 la fin de ligne <code>\\A</code> correspondance de longueur z\u00e9ro tout au d\u00e9but <code>\\z</code> correspondance de longueur z\u00e9ro tout \u00e0 la fin <code>\\Z</code> comme <code>\\z</code> mais correspond aussi avant le dernier saut de ligne <code>\\G</code> correspondance de longueur z\u00e9ro \u00e0 la position de fin de la correspondance pr\u00e9c\u00e9dente <p>Exemples :</p> RegEx Correspondances <code>^foobar</code> <code>foobar</code> seulement s'il est au d\u00e9but de ligne <code>foobar$</code> <code>foobar</code> seulement s'il est \u00e0 la fin de ligne <code>^foobar$</code> <code>foobar</code> seulement s'il est la seule cha\u00eene en ligne <code>foob.r</code> <code>foobar</code>, <code>foobbr</code>, <code>foob1r</code>, etc. <p>Le m\u00e9ta-caract\u00e8re <code>^</code> correspond \u00e0 une position de longueur z\u00e9ro au d\u00e9but de la cha\u00eene d'entr\u00e9e. <code>$</code> - \u00e0 la fin. Si le modificateur /m est activ\u00e9, ils correspondent \u00e9galement au d\u00e9but/\u00e0 la fin de lignes individuelles dans le texte multiligne.</p> <p>Notez qu'il n'y a pas de ligne vide dans la s\u00e9quence <code>\\x0D\\x0A</code>.</p> <p>TRegExpr</p> <p>Si vous utilisez la version Unicode, alors <code>^</code>/<code>$</code> correspondent \u00e9galement \u00e0 <code>\\x2028</code>, <code>\\x2029</code>, <code>\\x0B</code>, <code>\\x0C</code> ou <code>\\x85</code>.</p> <p>Le m\u00e9ta-caract\u00e8re <code>\\A</code> correspond \u00e0 la position de longueur z\u00e9ro tout au d\u00e9but de la cha\u00eene d'entr\u00e9e, <code>\\z</code> - \u00e0 tout \u00e0 la fin. Ils ignorent le modificateur /m. <code>\\Z</code> est comme <code>\\z</code>, mais correspond aussi avant le dernier saut de ligne (LF et CR LF). Le comportement de <code>\\A</code>, <code>\\z</code>, <code>\\Z</code> est con\u00e7u comme dans la plupart des grands moteurs de regex (Perl, PCRE, etc).</p> <p>Notez que <code>^.*$</code> ne correspond pas \u00e0 une cha\u00eene entre <code>\\x0D\\x0A</code>, car c'est un s\u00e9parateur de ligne ininterrompable. Mais il correspond \u00e0 la cha\u00eene vide dans la s\u00e9quence <code>\\x0A\\x0D</code> parce que c'est 2 sauts de ligne dans le mauvais ordre.</p> <p>TRegExpr</p> <p>Le traitement multi-ligne peut \u00eatre ajust\u00e9 par les propri\u00e9t\u00e9s LineSeparators et UseLinePairedBreak.</p> <p>Ainsi, vous pouvez utiliser des s\u00e9parateurs de style Unix <code>\\n</code> ou de style DOS/Windows <code>\\r\\n</code> ou les m\u00e9langer ensemble (comme dans le comportement par d\u00e9faut d\u00e9crit ci-dessus).</p> <p>Si vous pr\u00e9f\u00e9rez une description math\u00e9matiquement correcte, vous pouvez la trouver sur www.unicode.org.</p>"},{"location":"regular_expressions/#limites-de-mots","title":"Limites de mots","text":"RegEx Correspondances <code>\\b</code> une limite de mot <code>\\B</code> une non-limite de mot <p>Une limite de mot <code>\\b</code> est un point entre deux caract\u00e8res qui a un <code>\\w</code> d'un c\u00f4t\u00e9 et un <code>\\W</code> de l'autre c\u00f4t\u00e9 (dans un ordre quelconque).</p>"},{"location":"regular_expressions/#quantification","title":"Quantification","text":""},{"location":"regular_expressions/#quantificateurs","title":"Quantificateurs","text":"<p>Tout \u00e9l\u00e9ment d'une expression r\u00e9guli\u00e8re peut \u00eatre suivi d'un quantificateur. Le quantificateur sp\u00e9cifie le nombre de r\u00e9p\u00e9titions de l'\u00e9l\u00e9ment.</p> RegEx Correspondances <code>{n}</code> exactement <code>n</code> fois <code>{n,}</code> au moins <code>n</code> fois <code>{,m}</code> pas plus de <code>m</code> fois (seulement avec AllowBraceWithoutMin) <code>{n,m}</code> au moins <code>n</code> mais pas plus de <code>m</code> fois <code>*</code> z\u00e9ro ou plus, similaire \u00e0 <code>{0,}</code> <code>+</code> un ou plus, similaire \u00e0 <code>{1,}</code> <code>?</code> z\u00e9ro ou un, similaire \u00e0 <code>{0,1}</code> <p>Les chiffres entre accolades <code>{n,m}</code> sp\u00e9cifient le nombre minimum de fois \u00e0 correspondre <code>n</code> et le maximum <code>m</code>.</p> <p><code>{n}</code> est \u00e9quivalent \u00e0 <code>{n,n}</code> et correspond exactement <code>n</code> fois. <code>{n,}</code> correspond <code>n</code> fois ou plus.</p> <p>La variante <code>{,m}</code> n'est prise en charge que si la propri\u00e9t\u00e9 AllowBraceWithoutMin est d\u00e9finie.</p> <p>Il n'y a pas de limite pratique aux valeurs de n et m (la limite est la valeur maximale enti\u00e8re sign\u00e9e de 32 bits).</p> <p>Utiliser <code>{</code> sans une plage correcte donnera une erreur. Ce comportement peut \u00eatre modifi\u00e9 en d\u00e9finissant la propri\u00e9t\u00e9 AllowLiteralBraceWithoutRange, qui acceptera <code>{</code> comme un caract\u00e8re litt\u00e9ral, s'il n'est pas suivi d'une plage. Une plage avec une valeur basse plus grande que la valeur haute donnera toujours une erreur.</p> RegEx Correspondances <code>foob.*r</code> <code>foobar</code>, \u00a0<code>foobalkjdflkj9r</code> et <code>foobr</code> <code>foob.+r</code> <code>foobar</code>, <code>foobalkjdflkj9r</code> mais pas <code>foobr</code> <code>foob.?r</code> <code>foobar</code>, <code>foobbr</code> et <code>foobr</code> mais pas <code>foobalkj9r</code> <code>fooba{2}r</code> <code>foobaar</code> <code>fooba{2,}r</code> <code>foobaar'</code>, <code>foobaaar</code>, <code>foobaaaar</code>, etc. <code>fooba{2,3}r</code> <code>foobaar</code>, ou <code>foobaaar</code> \u00a0mais pas <code>foobaaaar</code> <code>(foobar){8,10}</code> 8...10 instances de <code>foobar</code> (<code>()</code> est un groupe) <p></p>"},{"location":"regular_expressions/#gourmandise","title":"Gourmandise","text":"<p>Les Quantificateurs en mode \"gourmand\" prennent autant que possible, en mode \"paresseux\" - le moins possible.</p> <p>Par d\u00e9faut, tous les quantificateurs sont \"gourmands\". Ajoutez le caract\u00e8re <code>?</code> pour rendre tout quantificateur \"paresseux\".</p> <p>Pour la cha\u00eene <code>abbbbc</code> :</p> RegEx Correspondances <code>b+</code> <code>bbbb</code> <code>b+?</code> <code>b</code> <code>b*?</code> cha\u00eene vide <code>b{2,3}?</code> <code>bb</code> <code>b{2,3}</code> <code>bbb</code> <p>Vous pouvez passer tous les quantificateurs en mode \"paresseux\" (modificateur /g, ci-dessous nous utilisons changement de modificateur en ligne).</p> RegEx Correspondances <code>(?-g)b+</code> <code>b</code>"},{"location":"regular_expressions/#quantificateur-possessif","title":"Quantificateur Possessif","text":"<p>La syntaxe est : <code>a++</code>, <code>a*+</code>, <code>a?+</code>, <code>a{2,4}+</code>. Actuellement, elle est prise en charge seulement pour les accolades simples, mais pas pour les accolades apr\u00e8s un groupe comme <code>(foo|bar){3,5}+</code>.</p> <p>Cette fonctionnalit\u00e9 regex est d\u00e9crite ici. En bref, le quantificateur possessif acc\u00e9l\u00e8re la correspondance dans les cas complexes.</p>"},{"location":"regular_expressions/#choix","title":"Choix","text":"<p>Les expressions dans le choix sont s\u00e9par\u00e9es par une barre verticale <code>|</code>.</p> <p>Ainsi <code>fee|fie|foe</code> correspondra \u00e0 l'une des <code>fee</code>, <code>fie</code>, ou <code>foe</code> dans la cha\u00eene cible (comme le ferait <code>f(e|i|o)e</code>).</p> <p>La premi\u00e8re expression inclut tout depuis le dernier d\u00e9limiteur de motif (<code>(</code>, <code>[</code>, ou le d\u00e9but du motif) jusqu'au premier <code>|</code>, et la derni\u00e8re expression contient tout depuis le dernier <code>|</code> jusqu'au prochain d\u00e9limiteur de motif.</p> <p>Cela semble un peu compliqu\u00e9, il est donc courant d'inclure le choix entre parenth\u00e8ses, pour minimiser la confusion sur son d\u00e9but et sa fin.</p> <p>Les expressions dans le choix sont test\u00e9es de gauche \u00e0 droite, donc la premi\u00e8re expression qui correspond, est celle qui est choisie.</p> <p>Par exemple, l'expression r\u00e9guli\u00e8re <code>foo|foot</code> dans la cha\u00eene <code>barefoot</code> correspondra \u00e0 <code>foo</code>. Juste la premi\u00e8re expression qui correspond.</p> <p>Rappelez-vous aussi que <code>|</code> est interpr\u00e9t\u00e9 comme un litt\u00e9ral \u00e0 l'int\u00e9rieur des crochets carr\u00e9s, donc si vous \u00e9crivez <code>[fee|fie|foe]</code> vous ne faites vraiment correspondre que <code>[feio|]</code>.</p> RegEx Correspondances <code>foo(bar|foo)</code> <code>foobar</code> ou <code>foofoo</code> <p></p>"},{"location":"regular_expressions/#groupes","title":"Groupes","text":"<p>Les crochets <code>()</code> sont utilis\u00e9s pour d\u00e9finir des groupes (c'est-\u00e0-dire des sous-expressions).</p> <p>[!NOTE] TRegExpr</p> <p>Les positions des groupes, les longueurs et les valeurs r\u00e9elles seront dans MatchPos, MatchLen et Match.</p> <p>Vous pouvez les remplacer par Substitute.</p> <p>Les groupes sont num\u00e9rot\u00e9s de gauche \u00e0 droite par leur parenth\u00e8se ouvrante (y compris les groupes imbriqu\u00e9s). Le premier groupe a l'indice 1. Le regex entier a l'indice 0.</p> Groupe Valeur 0 <code>foobar</code> 1 <code>foobar</code> 2 <code>bar</code>"},{"location":"regular_expressions/#references-arriere","title":"R\u00e9f\u00e9rences Arri\u00e8re","text":"<p>Les m\u00e9tacaract\u00e8res <code>\\1</code> \u00e0 <code>\\9</code> sont interpr\u00e9t\u00e9s comme des r\u00e9f\u00e9rences arri\u00e8re aux groupes de capture. Ils correspondent au groupe trouv\u00e9 pr\u00e9c\u00e9demment avec l'indice sp\u00e9cifi\u00e9.</p> <p>Le m\u00e9tacaract\u00e8re <code>\\g</code> suivi d'un nombre est \u00e9galement interpr\u00e9t\u00e9 comme des r\u00e9f\u00e9rences arri\u00e8re aux groupes de capture. Il peut \u00eatre suivi d'un nombre \u00e0 plusieurs chiffres.</p> RegEx Correspondances <code>(.)\\1+</code> <code>aaaa</code> et <code>cc</code> <code>(.+)\\1+</code> \u00e9galement <code>abab</code> et <code>123123</code> <code>(.)\\g1+</code> <code>aaaa</code> et <code>cc</code> <p>RegEx <code>(['\"]?)(\\d+)\\1</code> correspond \u00e0 <code>\"13\"</code> (entre guillemets doubles), ou <code>'4'</code> (entre guillemets simples) ou <code>77</code> (sans guillemets), etc.</p>"},{"location":"regular_expressions/#groupes-nomes-et-references-arriere","title":"Groupes Nom\u00e9s et R\u00e9f\u00e9rences Arri\u00e8re","text":"<p>Les groupes nomm\u00e9s dans les expressions r\u00e9guli\u00e8res vous permettent d'\u00e9tiqueter une partie de votre motif.  Cela rend vos motifs plus faciles \u00e0 comprendre et \u00e0 mettre \u00e0 jour.</p> <p>Pour cr\u00e9er un groupe nomm\u00e9, utilisez <code>(?&lt;name&gt;pattern)</code> ou <code>(?'name'pattern)</code>,  o\u00f9 <code>name</code> est le nom du groupe et <code>pattern</code> est le motif regex que vous souhaitez capturer.</p> <p>Les r\u00e9f\u00e9rences arri\u00e8re vous permettent de faire correspondre le m\u00eame texte qu'un groupe a captur\u00e9 pr\u00e9c\u00e9demment.  Les r\u00e9f\u00e9rences arri\u00e8re nomm\u00e9es utilisent <code>\\k&lt;name&gt;</code>, o\u00f9 <code>name</code> est le nom du groupe que vous souhaitez faire correspondre \u00e0 nouveau.</p> <p>TRegExpr prend \u00e9galement en charge la version Perl : <code>(?P&lt;name&gt;pattern)</code> pour d\u00e9finir un groupe nomm\u00e9 et <code>(?P=name)</code>  pour les r\u00e9f\u00e9rences arri\u00e8re.</p> <p>Exemple</p> RegEx Correspondances <code>(?P&lt;qq&gt;['\"])\\w+(?P=qq)</code> <code>\"mot\"</code> et <code>'mot'</code>"},{"location":"regular_expressions/#resultat-correspondant","title":"R\u00e9sultat Correspondant","text":"<p>Le d\u00e9but de la correspondance signal\u00e9e peut \u00eatre d\u00e9fini en utilisant <code>\\K</code>.</p> <p>Par d\u00e9faut, l'ensemble du texte couvert par un motif est consid\u00e9r\u00e9 comme correspondant. Cependant, il est possible de d\u00e9finir explicitement ce qui sera signal\u00e9.</p> <p>Le motif <code>a\\Kb</code> n\u00e9cessitera que le texte contienne \"ab\". Mais seulement le \"b\" sera signal\u00e9 comme ayant correspondu. Il peut y avoir plusieurs <code>\\K</code> dans un motif, Le dernier d\u00e9finira la position de d\u00e9but de correspondance. Seuls les <code>\\K</code> dans les parties actives du motif sont consid\u00e9r\u00e9s. Par ex. <code>a(\\Kb)?</code> ne consid\u00e9rera pas <code>\\K</code> s'il n'y a pas de \"b\". Les captures peuvent exister en dehors de la correspondance d\u00e9finie par <code>\\K</code>.</p> <p>Si utilis\u00e9 dans d'autres constructions qui peuvent s'appliquer en dehors de la correspondance signal\u00e9e (comme l'anticipation positive), alors la position marqu\u00e9e par <code>\\K</code> doit \u00eatre avant ou \u00e0 la fin signal\u00e9e de la correspondance. Si la position est marqu\u00e9e plus tard, la correspondance est consid\u00e9r\u00e9e comme \u00e9chou\u00e9e.</p> <p><code>\\K</code> est quelque peu similaire \u00e0 un regard en arri\u00e8re. Contrairement \u00e0 un regard en arri\u00e8re, la partie du motif avant le <code>\\K</code> doit \u00eatre apr\u00e8s la position de d\u00e9but de la correspondance, si le motif est appliqu\u00e9 \u00e0 partir d'une position d\u00e9cal\u00e9e dans le texte.</p>"},{"location":"regular_expressions/#modificateurs","title":"Modificateurs","text":"<p>Les modificateurs servent \u00e0 changer le comportement des expressions r\u00e9guli\u00e8res.</p> <p>Vous pouvez d\u00e9finir des modificateurs globalement dans votre syst\u00e8me ou les changer \u00e0 l'int\u00e9rieur de l'expression r\u00e9guli\u00e8re en utilisant (?imsxr-imsxr).</p> <p>TRegExpr</p> <p>Pour changer les modificateurs, utilisez ModifierStr ou les propri\u00e9t\u00e9s appropri\u00e9es de <code>TRegExpr</code> Modifier*.</p> <p>Les valeurs par d\u00e9faut sont d\u00e9finies dans variables globales. Par exemple, la variable globale <code>RegExprModifierX</code> d\u00e9finit la valeur par d\u00e9faut pour la propri\u00e9t\u00e9 <code>ModifierX</code>.</p> <p></p>"},{"location":"regular_expressions/#i-insensible-a-la-casse","title":"i, insensible \u00e0 la casse","text":"<p>Insensible \u00e0 la casse. Utilisez les param\u00e8tres de locale install\u00e9s dans votre syst\u00e8me, voir aussi InvertCase.</p> <p></p>"},{"location":"regular_expressions/#m-chaines-multilignes","title":"m, cha\u00eenes multilignes","text":"<p>Traitez la cha\u00eene comme plusieurs lignes. Ainsi <code>^</code> et <code>$</code> correspondent au d\u00e9but ou \u00e0 la fin de n'importe quelle ligne n'importe o\u00f9 dans la cha\u00eene.</p> <p>Voir aussi Limites de Ligne.</p> <p></p>"},{"location":"regular_expressions/#s-chaines-sur-une-seule-ligne","title":"s, cha\u00eenes sur une seule ligne","text":"<p>Traitez la cha\u00eene comme une seule ligne. Ainsi <code>.</code> correspond \u00e0 n'importe quel caract\u00e8re, m\u00eame un s\u00e9parateur de lignes.</p> <p>Voir aussi Limites de Ligne, auxquels il ne correspondrait normalement pas.</p> <p></p>"},{"location":"regular_expressions/#g-gourmandise","title":"g, gourmandise","text":"<p>TRegExpr seulement modificateur.</p> <p>En le d\u00e9sactivant, vous passerez quantificateurs en mode non-gourmand.</p> <p>Ainsi, si le modificateur <code>/g</code> est <code>Off</code>, alors <code>+</code> fonctionne comme <code>+?</code>, <code>*</code> comme <code>*?</code> et ainsi de suite.</p> <p>Par d\u00e9faut, ce modificateur est <code>On</code>.</p> <p></p>"},{"location":"regular_expressions/#x-syntaxe-etendue","title":"x, syntaxe \u00e9tendue","text":"<p>Permet de commenter l'expression r\u00e9guli\u00e8re et de la diviser en plusieurs lignes.</p> <p>Si le modificateur est <code>On</code>, nous ignorons tous les espaces blancs qui ne sont ni \u00e9chapp\u00e9s ni dans une classe de caract\u00e8res.</p> <p>Et le caract\u00e8re <code>#</code> s\u00e9pare les commentaires.</p> <p>Notez que vous pouvez utiliser des lignes vides pour formater l'expression r\u00e9guli\u00e8re pour une meilleure lisibilit\u00e9 :</p> <pre><code>(\n(abc) # commentaire 1\n#\n(efg) # commentaire 2\n)\n</code></pre> <p>Cela signifie \u00e9galement que si vous voulez de vrais espaces blancs ou des caract\u00e8res <code>#</code> dans le motif (en dehors d'une classe de caract\u00e8res, o\u00f9 ils ne sont pas affect\u00e9s par <code>/x</code>), vous devrez soit les \u00e9chapper soit les encoder en utilisant des \u00e9chappements octaux ou hexad\u00e9cimaux.</p> <p></p>"},{"location":"regular_expressions/#r-gammes-russes","title":"r, gammes russes","text":"<p>TRegExpr seul modificateur.</p> <p>Dans la table ASCII russe, les caract\u00e8res <code>\u0451</code>/<code>\u0401</code> sont plac\u00e9s s\u00e9par\u00e9ment des autres.</p> <p>Les caract\u00e8res russes grands et petits sont dans des plages s\u00e9par\u00e9es, c'est le m\u00eame que pour les caract\u00e8res anglais mais n\u00e9anmoins je voulais une forme courte.</p> <p>Avec ce modificateur au lieu de <code>[\u0430-\u044f\u0410-\u042f\u0451\u0401]</code> vous pouvez \u00e9crire <code>[\u0430-\u042f]</code> si vous avez besoin de tous les caract\u00e8res russes.</p> <p>Lorsque le modificateur est <code>On</code> :</p> RegEx Correspondances <code>\u0430-\u044f</code> caract\u00e8res de <code>\u0430</code> \u00e0 <code>\u044f</code> et <code>\u0451</code> <code>\u0410-\u042f</code> caract\u00e8res de <code>\u0410</code> \u00e0 <code>\u042f</code> et <code>\u0401</code> <code>\u0430-\u042f</code> tous les symboles russes <p>Le modificateur est r\u00e9gl\u00e9 sur On par d\u00e9faut.</p>"},{"location":"regular_expressions/#assertions-anticipation-positive-anticipation-negative","title":"Assertions (anticipation positive, anticipation n\u00e9gative)","text":"<p>Assertion d'anticipation positive : <code>foo(?=bar)</code> correspond \u00e0 \"foo\" seulement avant \"bar\", et \"bar\" est exclu de la correspondance.</p> <p>Assertion d'anticipation n\u00e9gative : <code>foo(?!bar)</code> correspond \u00e0 \"foo\" seulement s'il n'est pas suivi par \"bar\".</p> <p>Assertion de r\u00e9trospection positive : <code>(?&lt;=foo)bar</code> correspond \u00e0 \"bar\" seulement apr\u00e8s \"foo\", et \"foo\" est exclu de la correspondance.</p> <p>Assertion de r\u00e9trospection n\u00e9gative : <code>(?&lt;!foo)bar</code> correspond \u00e0 \"bar\" seulement s'il n'est pas pr\u00e9c\u00e9d\u00e9 de \"foo\".</p> <p>Limitations :</p> <ul> <li>Les r\u00e9trospections de longueur variable ne sont pas autoris\u00e9es \u00e0 contenir des groupes de capture.   Cela peut \u00eatre autoris\u00e9 en d\u00e9finissant la propri\u00e9t\u00e9 <code>AllowUnsafeLookBehind</code>.   Si cela est activ\u00e9 et qu'il y a plus d'une correspondance dans le texte que   le groupe pourrait capturer, alors la mauvaise correspondance peut \u00eatre captur\u00e9e. Cela   n'affecte pas la justesse de l'assertion globale. (C'est-\u00e0-dire, la   r\u00e9trospection retournera correctement si le texte avant correspondait au   motif).</li> <li>Les r\u00e9trospections de longueur variable peuvent \u00eatre lentes \u00e0 ex\u00e9cuter, si elles ne   correspondent pas.</li> </ul>"},{"location":"regular_expressions/#groupes-non-capturants","title":"Groupes non capturants","text":"<p>La syntaxe est comme ceci : <code>(?:expr)</code>.</p> <p>De tels groupes n'ont pas d'\"index\" et sont invisibles pour les r\u00e9f\u00e9rences arri\u00e8re. Les groupes non capturants sont utilis\u00e9s lorsque vous voulez grouper une sous-expression, mais vous ne voulez pas la sauvegarder comme une partie correspondante/captur\u00e9e de la cha\u00eene. C'est donc juste une fa\u00e7on d'organiser votre regex en sous-expressions sans surcharge de capturer le r\u00e9sultat :</p> RegEx Correspondances <code>(https?|ftp)://([^/\\r\\n]+)</code> dans <code>https://sorokin.engineer</code> correspond \u00e0 <code>https</code> et <code>sorokin.engineer</code> <code>(?:https?|ftp)://([^/\\r\\n]+)</code> dans <code>https://sorokin.engineer</code> correspond seulement \u00e0 <code>sorokin.engineer</code>"},{"location":"regular_expressions/#groupes-atomiques","title":"Groupes atomiques","text":"<p>La syntaxe est comme ceci : <code>(?&gt;expr|expr|...)</code>.</p> <p>Les groupes atomiques sont un cas sp\u00e9cial de groupes non capturants. Description de eux.</p>"},{"location":"regular_expressions/#modificateurs-en-ligne","title":"Modificateurs en ligne","text":"<p>Syntaxe pour un modificateur : <code>(?i)</code> pour activer, et <code>(?-i)</code> pour d\u00e9sactiver. Plusieurs modificateurs sont autoris\u00e9s comme ceci : <code>(?msgxr-imsgxr)</code>.</p> <p>Vous pouvez l'utiliser \u00e0 l'int\u00e9rieur de l'expression r\u00e9guli\u00e8re pour modifier les modificateurs \u00e0 la vol\u00e9e. Cela peut \u00eatre particuli\u00e8rement pratique car cela a une port\u00e9e locale dans une expression r\u00e9guli\u00e8re. Cela n'affecte que cette partie de l'expression r\u00e9guli\u00e8re qui suit l'op\u00e9rateur <code>(?imsgxr-imsgxr)</code>.</p> <p>Et s'il est \u00e0 l'int\u00e9rieur d'un groupe, cela n'affectera que ce groupe - sp\u00e9cifiquement la partie du groupe qui suit les modificateurs. Ainsi dans <code>((?i)Saint)-Petersburg</code> cela n'affecte que le groupe <code>((?i)Saint)</code> donc cela correspondra \u00e0 <code>saint-Petersburg</code> mais pas \u00e0 <code>saint-petersburg</code>.</p> <p>Les modificateurs en ligne peuvent \u00e9galement \u00eatre donn\u00e9s dans le cadre d'un groupe non capturant : <code>(?i:mod\u00e8le)</code>.</p> RegEx Correspondances <code>(?i)Saint-Petersburg</code> <code>Saint-petersburg</code> et <code>Saint-Petersburg</code> <code>(?i)Saint-(?-i)Petersburg</code> <code>Saint-Petersburg</code> mais pas <code>Saint-petersburg</code> <code>(?i)(Saint-)?Petersburg</code> <code>Saint-petersburg</code> et <code>saint-petersburg</code> <code>((?i)Saint-)?Petersburg</code> <code>saint-Petersburg</code>, mais pas <code>saint-petersburg</code>"},{"location":"regular_expressions/#commentaires","title":"Commentaires","text":"<p>La syntaxe est comme ceci : <code>(?#texte)</code>. Le texte \u00e0 l'int\u00e9rieur des crochets est ignor\u00e9.</p> <p>Notez que le commentaire est ferm\u00e9 par le <code>)</code> le plus proche, donc il n'y a aucun moyen de mettre un <code>)</code> litt\u00e9ral dans le commentaire.</p>"},{"location":"regular_expressions/#recursion","title":"R\u00e9cursion","text":"<p>La syntaxe est <code>(?R)</code>, l'alias est <code>(?0)</code>.</p> <p>Le regex <code>a(?R)?z</code> correspond \u00e0 une ou plusieurs lettres \"a\" suivies par exactement le m\u00eame nombre de lettres \"z\".</p> <p>Le principal objectif de la r\u00e9cursion est de correspondre \u00e0 des constructions \u00e9quilibr\u00e9es ou imbriqu\u00e9es. Le regex g\u00e9n\u00e9rique est <code>b(?:m|(?R))*e</code> o\u00f9 \"b\" est ce qui commence la construction, \"m\" est ce qui peut se produire au milieu de la construction, et \"e\" est ce qui se produit \u00e0 la fin de la construction.</p> <p>Si ce qui peut appara\u00eetre au milieu de la construction \u00e9quilibr\u00e9e peut \u00e9galement appara\u00eetre seul sans les parties de d\u00e9but et de fin, alors le regex g\u00e9n\u00e9rique est <code>b(?R)*e|m</code>.</p>"},{"location":"regular_expressions/#appels-de-sous-routine","title":"Appels de sous-routine","text":"<p>Syntaxe pour l'appel aux groupes num\u00e9rot\u00e9s : <code>(?1)</code> ... <code>(?90)</code> (l'indice maximal est limit\u00e9 par le code).</p> <p>Syntaxe pour l'appel aux groupes nomm\u00e9s : <code>(?P&gt;name)</code>. La syntaxe Perl est \u00e9galement prise en charge: <code>(?&amp;name)</code>, <code>\\g&lt;name&gt;</code> and <code>\\g'name'</code></p> <p>C'est comme la r\u00e9cursion, mais appelle seulement le code du groupe de capture avec l'indice sp\u00e9cifi\u00e9.</p>"},{"location":"regular_expressions/#categories-unicode","title":"Cat\u00e9gories Unicode","text":"<p>La norme Unicode a des noms pour les cat\u00e9gories de caract\u00e8res. Ce sont des cha\u00eenes de 2 lettres. Par exemple, \"Lu\" est pour les lettres majuscules, \"Ll\" est pour les lettres minuscules. Et la cat\u00e9gorie plus grande d'une lettre \"L\" est pour toutes les lettres.</p> <ul> <li>Cc - Contr\u00f4le</li> <li>Cf - Format</li> <li>Co - Utilisation Priv\u00e9e</li> <li>Cs - Surrogat</li> <li>Ll - Lettre Minuscule</li> <li>Lm - Lettre Modificatrice</li> <li>Lo - Autre Lettre</li> <li>Lt - Lettre Majuscule et Minuscule</li> <li>Lu - Lettre Majuscule</li> <li>Mc - Marque d'Espacement</li> <li>Me - Marque d'Encadrement</li> <li>Mn - Marque Non-espac\u00e9e</li> <li>Nd - Nombre D\u00e9cimal</li> <li>Nl - Nombre de Lettre</li> <li>No - Autre Nombre</li> <li>Pc - Ponctuation de Connexion</li> <li>Pd - Ponctuation Tiret</li> <li>Pe - Ponctuation Fermante</li> <li>Pf - Ponctuation Finale</li> <li>Pi - Ponctuation Initiale</li> <li>Po - Autre Ponctuation</li> <li>Ps - Ponctuation Ouvrante</li> <li>Sc - Symbole Mon\u00e9taire</li> <li>Sk - Symbole Modificateur</li> <li>Sm - Symbole Math\u00e9matique</li> <li>So - Autre Symbole</li> <li>Zl - S\u00e9parateur de Ligne</li> <li>Zp - S\u00e9parateur de Paragraphe</li> <li>Zs - S\u00e9parateur d'Espace</li> </ul> <p>Le m\u00e9tacaract\u00e8re <code>\\p</code> d\u00e9signe un caract\u00e8re Unicode de la cat\u00e9gorie sp\u00e9cifi\u00e9e. Syntaxe : <code>\\pL</code> et <code>\\p{L}</code> pour un nom \u00e0 1 lettre, <code>\\p{Lu}</code> pour les noms \u00e0 2 lettres.</p> <p>Le m\u00e9tacaract\u00e8re <code>\\P</code> est invers\u00e9, il d\u00e9signe un caract\u00e8re Unicode non dans la cat\u00e9gorie sp\u00e9cifi\u00e9e.</p> <p>Ces m\u00e9tacaract\u00e8res sont \u00e9galement pris en charge dans les classes de caract\u00e8res.</p>"},{"location":"regular_expressions/#postface","title":"Postface","text":"<p>Dans cet ancien article de blog du si\u00e8cle pr\u00e9c\u00e9dent j'illustre quelques utilisations des expressions r\u00e9guli\u00e8res.</p>"},{"location":"tregexpr/","title":"TRegExpr","text":"<p>To use it, copy files \"regexpr.pas\", \"regexpr_unicodedata.pas\", \"regexpr_compilers.inc\", to your project folder.</p> <p>The library is already included into Lazarus (Free Pascal) project so you do not need to copy anything if you use Lazarus.</p>"},{"location":"tregexpr/#classe-tregexpr","title":"Classe TRegExpr","text":""},{"location":"tregexpr/#versionmajor-versionminor","title":"VersionMajor, VersionMinor","text":"<p>Return major and minor version of the component.</p> <pre><code>VersionMajor = 1\nVersionMinor = 101\n</code></pre>"},{"location":"tregexpr/#expression","title":"Expression","text":"<p>Expression r\u00e9guli\u00e8re.</p> <p>For optimization, regular expression is automatically compiled into P-code. Human-readable form of the P-code is returned by D\u00e9verser.</p> <p>In case of any errors in compilation, <code>Error</code> method is called (by default <code>Error</code> raises exception ERegExpr).</p>"},{"location":"tregexpr/#modificateurstr","title":"Modificateurstr","text":"<p>Set or get values of regular expression modifiers.</p> <p>Format of the string is similar to (?ismx-ismx). For example <code>Modificateurstr := \u2018i-x\u2019</code> will switch on the modifier /i, switch off /x and leave unchanged others.</p> <p>Si vous essayez de d\u00e9finir un modificateur non support\u00e9, <code>Error</code> sera appel\u00e9.</p>"},{"location":"tregexpr/#modificateur","title":"Modificateur","text":"<p>Modifier /i, \"case-insensitive\", initialized with RegExprModificateur value.</p>"},{"location":"tregexpr/#modificateur_1","title":"Modificateur","text":"<p>Modifier /r, \"Russian range extension\", initialized with RegExprModificateur value.</p>"},{"location":"tregexpr/#modificateurs","title":"Modificateurs","text":"<p>Modifier /s, \"single line strings\", initialized with RegExprModificateurs value.</p>"},{"location":"tregexpr/#modificateur_2","title":"Modificateur","text":"<p>Modifier /g, \"greediness\", initialized with RegExprModificateur value.</p>"},{"location":"tregexpr/#modificateur_3","title":"Modificateur","text":"<p>Modifier /m, \"multi-line strings\", initialized with RegExprModificateur value.</p>"},{"location":"tregexpr/#modificateurx","title":"ModificateurX","text":"<p>Modifier /x, \"eXtended syntax\", initialized with RegExprModificateurX value.</p>"},{"location":"tregexpr/#exec","title":"Exec","text":"<p>Finds regular expression against <code>AInputString</code>, starting from the beginning.</p> <p>The overloaded <code>Exec</code> version without <code>AInputString</code> exists, it uses <code>AInputString</code> from previous call.</p> <p>See also global function ExecRegExpr that you can use without explicit <code>TRegExpr</code> object creation.</p>"},{"location":"tregexpr/#execnext","title":"ExecNext","text":"<p>Finds next match. If parameter <code>ABackward</code> is True, it goes downto position 1, ie runs backward search.</p> <p>Without parameter it works the same as:</p> <pre><code>if RencontreLen [0] = 0\n  then ExecPos (RencontrePos [0] + 1)\n  else ExecPos (RencontrePos [0] + RencontreLen [0]);\n</code></pre> <p>Raises exception if used without preceeding successful call to Exec, ExecPos or ExecNext.</p> <p>So you always must use something like:</p> <pre><code>if Exec(InputString)\n  then\n    repeat\n      { proceed results}\n    until not ExecNext;\n</code></pre>"},{"location":"tregexpr/#execpos","title":"ExecPos","text":"<p>Finds match for <code>AInputString</code> starting from <code>AOffset</code> position (1-based).</p> <p>Parameter <code>ABackward</code> means going from <code>AOffset</code> downto 1, ie backward search.</p> <p>Parameter <code>ATryOnce</code> means that testing for regex will be only at the initial position, without going to next/previous positions.</p>"},{"location":"tregexpr/#inputstring","title":"InputString","text":"<p>Returns current input string (from last Exec call or last assign to this property).</p> <p>Toute affectation \u00e0 cette propri\u00e9t\u00e9 efface Rencontre, RencontrePos et RencontreLen.</p>"},{"location":"tregexpr/#remplacer","title":"Remplacer","text":"<pre><code>function Remplacer (const ATemplate : RegExprString) : RegExprString;\n</code></pre> <p>Returns <code>ATemplate</code>, where <code>$&amp;</code> or <code>$0</code> are replaced with the found match, and <code>$1</code> to <code>$9</code> are replaced with found groups 1 to 9.</p> <p>To use in template the characters <code>$</code> or <code>\\</code>, escape them with a backslash <code>\\</code>, like <code>\\\\</code> or <code>\\$</code>.</p> Symbol Description <code>$&amp;</code> match entier expression r\u00e9guli\u00e8re <code>$0</code> match entier expression r\u00e9guli\u00e8re <code>$1</code> .. <code>$9</code> contents of numbered group 1 .. 9 <code>\\n</code> dans Windows remplac\u00e9 par <code>\\r\\n</code> <code>\\l</code> lowercase one next char <code>\\L</code> minuscule tous les caract\u00e8res apr\u00e8s cela <code>\\u</code> uppercase one next char <code>\\U</code> majuscule tous les caract\u00e8res apr\u00e8s cela <pre><code>'1\\$ is $2\\\\rub\\\\' -&gt; '1$ is &lt;Rencontre[2]&gt;\\rub\\'\n'\\U$1\\\\r' transforms into '&lt;Rencontre[1] in uppercase&gt;\\r'\n</code></pre> <p>If you want to place raw digit after \u2018\\$n\u2019 you must delimit <code>n</code> with curly braces <code>{}</code>.</p> <pre><code>'a$12bc' -&gt; 'a&lt;Rencontre[12]&gt;bc'\n'a${1}2bc' -&gt; 'a&lt;Rencontre[1]&gt;2bc'.\n</code></pre> <p>To use found named groups, use syntax <code>${name}</code>, where \"name\" is valid identifier of previously found named group (starting with non-digit).</p>"},{"location":"tregexpr/#divise","title":"Divis\u00e9","text":"<p>Divis\u00e9s <code>AInputStr</code> into <code>APieces</code> by regex occurrences.</p> <p>Appelle en interne Exec / ExecNext</p> <p>See also global function Divis\u00e9RegExpr that you can use without explicit <code>TRegExpr</code> object creation.</p> <p></p>"},{"location":"tregexpr/#remplacer-remplacerex","title":"Remplacer, RemplacerEx","text":"<pre><code>function Replace (Const AInputStr : RegExprString;\n  const AReplaceStr : RegExprString;\n  AUseSubstitution : boolean= False)\n : RegExprString; overload;\n\nfunction Replace (Const AInputStr : RegExprString;\n  AReplaceFunc : TRegExprReplaceFunction)\n : RegExprString; overload;\n\nfunction ReplaceEx (Const AInputStr : RegExprString;\n  AReplaceFunc : TRegExprReplaceFunction):\n  RegExprString;\n</code></pre> <p>Returns the string with regex occurencies replaced by the replace string.</p> <p>If last argument (<code>AUseSubstitution</code>) is true, then <code>AReplaceStr</code> will be used as template for Substitution methods.</p> <pre><code>Expression := '((?i)block|var)\\s*(\\s*\\([^ ]*\\)\\s*)\\s*';\nReplace ('BLOCK( test1)', 'def \"$1\" value \"$2\"', True);\n</code></pre> <p>Retourne <code>def \"BLOCK\" valeur \"test1\"</code></p> <pre><code>Remplacez (&amp;#39;BLOCK (test1)&amp;#39;, &amp;#39;def &amp;quot;$ 1&amp;quot;, valeur &amp;quot;$ 2&amp;quot;&amp;#39;, False)\n</code></pre> <p>Retourne <code>def &amp;quot;$ 1&amp;quot; valeur &amp;quot;$ 2&amp;quot;</code></p> <p>Appelle en interne Exec / ExecNext</p> <p>Overloaded version and <code>ReplaceEx</code> operate with callback function, so you can implement really complex functionality.</p> <p>See also global function ReplaceRegExpr that you can use without explicit <code>TRegExpr</code> object creation.</p>"},{"location":"tregexpr/#subexprrencontrecount","title":"SubExprRencontreCount","text":"<p>Count of groups (subexpressions) found in last Exec / ExecNext call.</p> <p>If there are no groups found, but some string was found (Exec* returned True), it returns 0. If no groups nor some string were found (Exec / ExecNext returned false), it returns -1.</p> <p>Note, that some group may be not found, and for such group <code>MathPos=RencontreLen=-1</code> and <code>Rencontre=\u2019\u2019</code>.</p> <pre><code>Expression := '(1)?2(3)?';\nExec ('123'): SubExprRencontreCount=2, Rencontre[0]='123', [1]='1', [2]='3'\n\nExec ('12'): SubExprRencontreCount=1, Rencontre[0]='12', [1]='1'\n\nExec ('23'): SubExprRencontreCount=2, Rencontre[0]='23', [1]='', [2]='3'\n\nExec ('2'): SubExprRencontreCount=0, Rencontre[0]='2'\n\nExec ('7') - return False: SubExprRencontreCount=-1\n</code></pre>"},{"location":"tregexpr/#rencontrepos","title":"RencontrePos","text":"<p>Position (1-based) of group with specified index. Result is valid only after some match was found. First group has index 1, the entire match has index 0.</p> <p>Returns -1 if no group with specified index was found.</p>"},{"location":"tregexpr/#rencontrelen","title":"RencontreLen","text":"<p>Length of group with specified index. Result is valid only after some match was found. First group has index 1, the entire match has index 0.</p> <p>Returns -1 if no group with specified index was found.</p>"},{"location":"tregexpr/#rencontre","title":"Rencontre","text":"<p>String of group with specified index. First group has index 1, the entire match has index 0. Returns empty string, if no such group was found.</p>"},{"location":"tregexpr/#rencontreindexfromname","title":"RencontreIndexFromName","text":"<p>Returns group index (1-based) from group name, which is needed for \"named groups\". Returns -1 if no such named group was found.</p>"},{"location":"tregexpr/#lasterror","title":"LastError","text":"<p>Returns Id of last error, or 0 if no errors occured (unusable if <code>Error</code> method raises exception). It also clears internal status to 0 (no errors).</p>"},{"location":"tregexpr/#errormsg","title":"ErrorMsg","text":"<p>Renvoie le message <code>Error</code> en cas d'erreur avec <code>ID = AErrorID</code>.</p>"},{"location":"tregexpr/#compilerrerrorpos","title":"CompilerrErrorPos","text":"<p>Returns position in regex, where P-code compilation was stopped.</p> <p>Useful for error diagnostics.</p>"},{"location":"tregexpr/#spacechars","title":"SpaceChars","text":"<p>Contains chars, treated as <code>\\s</code> (initially filled with RegExprSpaceChars global constant).</p>"},{"location":"tregexpr/#wordchars","title":"WordChars","text":"<p>Contains chars, treated as <code>\\w</code> (initially filled with RegExprWordChars global constant).</p>"},{"location":"tregexpr/#lineseparators","title":"LineSeparators","text":"<p>Line separators (like <code>\\n</code> in Unix), initially filled with RegExprLineSeparators global constant).</p> <p>See also Line Boundaries</p>"},{"location":"tregexpr/#uselinepairedbreak","title":"UseLinePairedBreak","text":"<p>Boolean property, enables to detect paired line separator CR LF.</p> <p>See also Line Boundaries</p> <p>For example, if you need only Unix-style separator LF, assign <code>LineSeparators := #$a</code> and <code>UseLinePairedBreak := False</code>.</p> <p>If you want to accept as line separators only CR LF but not CR or LF alone, then assign <code>LineSeparators := ''</code> (empty string) and <code>UseLinePairedBreak := True</code>.</p> <p>By default, \"mixed\" mode is used (defined in RegExprLineSeparators global constant):</p> <pre><code>LineSeparators := #$d#$a; \nUseLinePairedBreak := True;\n</code></pre> <p>Behaviour of this mode is described in the Line Boundaries.</p>"},{"location":"tregexpr/#compiler","title":"Compiler","text":"<p>Compilers regular expression to internal P-code.</p> <p>Useful for example for GUI regular expressions editors - to check regular expression without using it.</p>"},{"location":"tregexpr/#deverser","title":"D\u00e9verser","text":"<p>Shows P-code (compiled regular expression) as human-readable string.</p>"},{"location":"tregexpr/#constantes-globales","title":"Constantes globales","text":""},{"location":"tregexpr/#escchar","title":"EscChar","text":"<p>Escape character, by default backslash <code>'\\'</code>.</p>"},{"location":"tregexpr/#remplacergroupchar","title":"RemplacerGroupChar","text":"<p>Char used to prefix groups (numbered and named) in Remplacer method, by default <code>'$'</code>.</p>"},{"location":"tregexpr/#regexprmodificateur","title":"RegExprModificateur","text":"<p>Modifier i default value.</p>"},{"location":"tregexpr/#regexprmodificateur_1","title":"RegExprModificateur","text":"<p>Modifier r default value.</p>"},{"location":"tregexpr/#regexprmodificateurs","title":"RegExprModificateurs","text":"<p>Modifier s default value.</p>"},{"location":"tregexpr/#regexprmodificateur_2","title":"RegExprModificateur","text":"<p>Modifier g default value.</p>"},{"location":"tregexpr/#regexprmodificateur_3","title":"RegExprModificateur","text":"<p>Modifier m default value.</p>"},{"location":"tregexpr/#regexprmodificateurx","title":"RegExprModificateurX","text":"<p>Modifier x default value.</p>"},{"location":"tregexpr/#regexprspacechars","title":"RegExprSpaceChars","text":"<p>Default for SpaceChars property.</p>"},{"location":"tregexpr/#regexprwordchars","title":"RegExprWordChars","text":"<p>Default value for WordChars property. \u00a0 RegExprLineSeparators \\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~~</p> <p>Default value for LineSeparators property.</p>"},{"location":"tregexpr/#fonctions-globales","title":"Fonctions globales","text":"<p>All this functionality is available as methods of <code>TRegExpr</code>, but with global functions you do not need to create <code>TReExpr</code> instance so your code would be more simple if you just need one function.</p>"},{"location":"tregexpr/#execregexpr","title":"ExecRegExpr","text":"<p>Returns True if the string matches the regular expression. Just like Exec in <code>TRegExpr</code>.</p>"},{"location":"tregexpr/#diviseregexpr","title":"Divis\u00e9RegExpr","text":"<p>Divis\u00e9s the string by regular expression occurences. See also Divis\u00e9 if you prefer to create <code>TRegExpr</code> instance explicitly.</p>"},{"location":"tregexpr/#replaceregexpr","title":"ReplaceRegExpr","text":"<pre><code>function ReplaceRegExpr (\n    const ARegExpr, AInputStr, AReplaceStr : RegExprString;\n    AUseSubstitution : boolean= False\n) : RegExprString; overload;\n\nType\n  TRegexReplaceOption = (rroModificateur,\n                         rroModificateur,\n                         rroModificateurs,\n                         rroModificateur,\n                         rroModificateur,\n                         rroModificateurX,\n                         rroUseSubstitution,\n                         rroUseOsLineEnd);\n  TRegexReplaceOptions = Set of TRegexReplaceOption;\n\nfunction ReplaceRegExpr (\n    const ARegExpr, AInputStr, AReplaceStr : RegExprString;\n    Options :TRegexReplaceOptions\n) : RegExprString; overload;\n</code></pre> <p>Returns the string with regular expressions replaced by the <code>AReplaceStr</code>. See also Replace if you prefer to create TRegExpr instance explicitly.</p> <p>If last argument (<code>AUseSubstitution</code>) is True, then <code>AReplaceStr</code> will be used as template for <code>Substitution methods</code>:</p> <pre><code>ReplaceRegExpr (\n  '((?i)block|var)\\s*(\\s*\\([^ ]*\\)\\s*)\\s*',\n  'BLOCK(test1)',\n  'def \"$1\" value \"$2\"',\n  True\n)\n</code></pre> <p>Returns <code>def 'BLOCK' value 'test1'</code></p> <p>Mais celui-ci (notez qu'il n'y a pas de dernier argument):</p> <pre><code>ReplaceRegExpr (\n  '((?i)block|var)\\s*(\\s*\\([^ ]*\\)\\s*)\\s*',\n  'BLOCK(test1)',\n  'def \"$1\" value \"$2\"'\n)\n</code></pre> <p>Retourne <code>def &amp;quot;$ 1&amp;quot; valeur &amp;quot;$ 2&amp;quot;</code></p>"},{"location":"tregexpr/#version-avec-options","title":"Version avec options","text":"<p>With <code>Options</code> you control <code>\\n</code> behaviour (if <code>rroUseOsLineEnd</code> then <code>\\n</code> is replaced with <code>\\n\\r</code> in Windows and <code>\\n</code> in Linux). And so on.</p> <pre><code>Type\n  TRegexReplaceOption = (rroModificateur,\n                         rroModificateur,\n                         rroModificateurs,\n                         rroModificateur,\n                         rroModificateur,\n                         rroModificateurX,\n                         rroUseSubstitution,\n                         rroUseOsLineEnd);\n</code></pre>"},{"location":"tregexpr/#quoteregexprmetachars","title":"QuoteRegExprMetaChars","text":"<p>Replace all metachars with its safe representation, for example <code>abc'cd.(</code> is converted to <code>abc\\'cd\\.\\(</code></p> <p>This function is useful for regex auto-generation from user input.</p>"},{"location":"tregexpr/#regexprsubexpressions","title":"RegExprSubExpressions","text":"<p>Makes list of subexpressions found in <code>ARegExpr</code>.</p> <p>In <code>ASubExps</code> every item represents subexpression, from first to last, in format:</p> <p>String - texte de sous-expression (sans '()')</p> <p>Low word of Object - starting position in ARegExpr, including \u2018(\u2019 if exists! (first position is 1)</p> <p>High word of Object - length, including starting \u2018(\u2019 and ending \u2018)\u2019 if exist!</p> <p><code>AExtendedSyntax</code> - must be True if modifier <code>/x</code> os on, while using the regex.</p> <p>Usefull for GUI editors of regex (you can find example of usage in REStudioMain.pas)</p> <p>=========== ======= Code de r\u00e9sultat Sens =========== ======= 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Success. No unbalanced brackets were found. -1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Not enough closing brackets <code>)</code>. - (n + 1) \u00a0 \u00a0 \u00a0At position n it was found opening <code>[</code> without corresponding closing <code>]</code>. n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 At position n it was found closing bracket <code>)</code> without corresponding opening <code>(</code>. =========== =======\u00a0</p> <p>If <code>Result &lt;&gt; 0</code>, then <code>ASubExprs</code> can contain empty items or illegal ones.</p>"},{"location":"tregexpr/#eregexpr","title":"ERegExpr","text":"<pre><code>ERegExpr = class (Exception)\n\u00a0 public\n\u00a0 \u00a0ErrorCode : integer; // error code. Compilation error codes are before 1000\n\u00a0 \u00a0CompilerrErrorPos : integer; // Position in r.e. where compilation error occured\n\u00a0end;\n</code></pre>"},{"location":"tregexpr/#unicode","title":"Unicode","text":"<p>In Unicode mode, all strings (InputString, Expression, internal strings) are of type UnicodeString/WideString, instead of simple \"string\". Unicode slows down performance, so use it only if you really need Unicode support.</p> <p>To use Unicode, uncomment <code>{$DEFINE UniCode}</code> in regexpr.pas (remove <code>off</code>).</p>"}]}