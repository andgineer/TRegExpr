{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"English \u0420\u0443\u0441\u0441\u043a\u0438\u0439 Deutsch \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 Fran\u00e7ais Espa\u00f1ol"},{"location":"#introduccion","title":"Introducci\u00f3n","text":"<p>La biblioteca TRegExpr implementa expresiones regulares.</p> <p>Las expresiones regulares son una herramienta f\u00e1cil de usar y poderosa para b\u00fasquedas y sustituciones sofisticadas, as\u00ed como para la verificaci\u00f3n de texto basada en plantillas.</p> <p>Son especialmente \u00fatiles para la validaci\u00f3n de entradas de usuarios en formularios - para validar direcciones de correo electr\u00f3nico, etc.</p> <p>Tambi\u00e9n puedes extraer n\u00fameros de tel\u00e9fono, c\u00f3digos postales, etc., de p\u00e1ginas web o documentos, buscar patrones complejos en archivos de registro y todo lo que puedas imaginar. Las reglas (plantillas) pueden cambiarse sin necesidad de recompilar tu programa.</p> <p>TRegExpr est\u00e1 implementado en Pascal puro. Est\u00e1 incluido en Lazarus (Free Pascal): paquete. Pero tambi\u00e9n existe como una biblioteca separada y puede ser compilada por Delphi 2-7, Borland C++ Builder 3-6.</p> <p>C\u00f3mo fue recibida la biblioteca.</p>"},{"location":"#inicio-rapido","title":"Inicio r\u00e1pido","text":"<p>Para usar la biblioteca, simplemente a\u00f1ade las fuentes a tu proyecto y usa la clase TRegExpr.</p> <p>En el FAQ puedes aprender de los problemas de otros usuarios.</p> <p>La aplicaci\u00f3n de Windows lista para ejecutar REStudio te ayudar\u00e1 a aprender y depurar expresiones regulares.</p> <p>Si ves alg\u00fan problema, por favor crea un informe de bug.</p>"},{"location":"#traducciones","title":"Traducciones","text":"<p>La documentaci\u00f3n ha sido traducida al ingl\u00e9s y al ruso.</p> <p>Hay traducciones incompletas a varios otros idiomas. Si quieres ayudar a completarlas, cont\u00e1ctame.</p>"},{"location":"#gratitud","title":"Gratitud","text":"<p>Muchas caracter\u00edsticas sugeridas y un mont\u00f3n de errores fueron encontrados (e incluso corregidos) por los contribuyentes de TRegExpr.</p> <p>No puedo listarlos a todos aqu\u00ed, pero aprecio todos los informes de errores, sugerencias de caracter\u00edsticas y preguntas que recibo de ustedes.</p> <ul> <li>Alexey Torgashin - principal contribuyente desde 2019, por ejemplo,</li> <li>grupos nombrados, grupos sin captura, afirmaciones, b\u00fasqueda hacia atr\u00e1s y mucho m\u00e1s</li> <li>Guido Muehlwitz - encontr\u00f3 y corrigi\u00f3 un feo error en el procesamiento de cadenas grandes</li> <li>Stephan Klimek - pruebas en C++Builder y sugerencia/implementaci\u00f3n de muchas caracter\u00edsticas</li> <li>Steve Mudford - implement\u00f3 el par\u00e1metro Offset</li> <li>Martin Baur (www.mindpower.com) - traducci\u00f3n al alem\u00e1n, sugerencias \u00fatiles</li> <li>Yury Finkel - implement\u00f3 soporte Unicode, encontr\u00f3 y corrigi\u00f3 algunos errores</li> <li>Ralf Junker - implement\u00f3 algunas caracter\u00edsticas, muchas sugerencias de optimizaci\u00f3n</li> <li>Simeon Lilov - traducci\u00f3n al b\u00falgaro</li> <li>Filip Jirs\u00e1k y Matthew Winter - ayuda en la implementaci\u00f3n del modo no \u00e1vido</li> <li>Kit Eason - muchos ejemplos para la secci\u00f3n de ayuda de introducci\u00f3n</li> <li>Juergen Schroth - b\u00fasqueda de errores y sugerencias \u00fatiles</li> <li>Martin Ledoux - traducci\u00f3n al franc\u00e9s</li> <li>Diego Calp, Argentina - traducci\u00f3n al espa\u00f1ol</li> </ul>"},{"location":"demos/","title":"Poblaci\u00f3n","text":"<p>C\u00f3digo de demostraci\u00f3n para TRegExpr</p>"},{"location":"demos/#introduccion","title":"Introducci\u00f3n","text":"<p>If you don't familiar with regular expression, please, take a look at the r.e.syntax.</p> <p>TRegExpr interface described in TRegExpr interface.</p>"},{"location":"demos/#text2html","title":"Text2HTML","text":"<p>Fuentes Text2HTML</p> <p>Publicar texto plano como HTML</p> <p>Uses unit HyperLinksDecorator that is based on TRegExpr. \u00a0 Esta unidad contiene funciones para decorar hiperv\u00ednculos.</p> <p>For example, replaces <code>www.sorokin.engineer</code> with <code>&lt;a href=\"http://www.sorokin.engineer\"&gt;www.sorokin.engineer&lt;/a&gt;</code> or <code>filbert@yandex.ru</code> with <code>&lt;a href=\"mailto:filbert@yandex.ru\"&gt;filbert@yandex.ru&lt;/a&gt;</code>. \u00a0 .. code-block:: pascal</p> <p>function DecorateURLs ( const AText : string; AFlags : TDecorateURLsFlagSet = [durlAddr, durlPath]</p> <p>) : string;</p> <p>type TDecorateURLsFlags = ( durlProto, durlAddr, durlPort, durlPath, durlBMark, durlParam);</p> <p>TDecorateURLsFlagSet = set of TDecorateURLsFlags;</p> <p>function DecorateEMails (const AText : string) : string; \u00a0</p> Valor Sentido durlProto Protocolo (como <code>ftp: //</code> o <code>http: //</code>) durlAddr \u00a0 Direcci\u00f3n TCP o nombre de dominio (como <code>sorokin.engineer</code>) durlPort \u00a0 N\u00famero de puerto si se especifica (como <code>: 8080</code>) durlPath \u00a0 Ruta al documento (como <code>index.html</code>) durlBMark Marca de libro (como <code># mark</code>) durlParam Par\u00e1metros de URL (como <code>? ID = 2 &amp;amp; User = 13</code>) <p>Devuelve el texto de entrada <code>AText</code> con hiperv\u00ednculos decorados.</p> <p><code>AFlags</code> describes, which parts of hyper-link must be included into visible part of the link.</p> <p>For example, if AFlags is <code>[durlAddr]</code> then hyper link <code>www.sorokin.engineer/contacts.htm</code> will be decorated as <code>&lt;a href=\"www.sorokin.engineer/contacts.htm\"&gt;www.sorokin.engineer&lt;/a&gt;</code>.</p>"},{"location":"demos/#tregexprroutines","title":"TRegExprRoutines","text":"<p>Ejemplos muy simples, ver comentarios dentro de la unidad.</p>"},{"location":"demos/#tregexprclass","title":"TRegExprClass","text":"<p>Ejemplos un poco m\u00e1s complejos, ver comentarios dentro de la unidad</p>"},{"location":"faq/","title":"Preguntas Frecuentes","text":""},{"location":"faq/#encontre-un-error-terrible-tregexpr-provoca-una-excepcion-de-violacion-de-acceso","title":"Encontr\u00e9 un error terrible: \u00a1TRegExpr provoca una excepci\u00f3n de violaci\u00f3n de acceso!","text":"<p>Respuesta</p> <p>Debe crear el objeto antes de usarlo. Por lo tanto, despu\u00e9s de haber declarado algo como:</p> <pre><code>r : TRegExpr\n</code></pre> <p>no olvide crear la instancia del objeto:</p> <pre><code>r := TRegExpr.Create.\n</code></pre>"},{"location":"faq/#soporta-unicode","title":"\u00bfSoporta Unicode?","text":"<p>Respuesta</p> <p>C\u00f3mo usar Unicode</p>"},{"location":"faq/#por-que-tregexpr-devuelve-mas-de-una-linea","title":"\u00bfPor qu\u00e9 TRegExpr devuelve m\u00e1s de una l\u00ednea?","text":"<p>Por ejemplo, r.e. <code>&lt;font .\\*&gt;</code> devuelve el primer <code>&lt;font</code>, luego el resto del archivo incluyendo el \u00faltimo <code>&lt;/html&gt;</code>.</p> <p>Respuesta</p> <p>Por compatibilidad hacia atr\u00e1s, el modificador /s est\u00e1 <code>Activado</code> por defecto.</p> <p>Desact\u00edvalo y <code>.</code> coincidir\u00e1 con cualquier cosa excepto separadores de l\u00ednea - exactamente como deseas.</p> <p>Por cierto, sugiero <code>&lt;font ([^\\n&gt;]*)&gt;</code>, en <code>Match[1]</code> estar\u00e1 la URL.</p>"},{"location":"faq/#por-que-tregexpr-devuelve-mas-de-lo-que-espero","title":"\u00bfPor qu\u00e9 TRegExpr devuelve m\u00e1s de lo que espero?","text":"<p>Por ejemplo, r.e. <code>&lt;p&gt;(.+)&lt;/p&gt;</code> aplicado a la cadena <code>&lt;p&gt;a&lt;/p&gt;&lt;p&gt;b&lt;/p&gt;</code> devuelve <code>a&lt;/p&gt;&lt;p&gt;b</code> pero no <code>a</code> como esperaba.</p> <p>Respuesta</p> <p>Por defecto, todos los operadores trabajan en modo <code>voraz</code>, por lo que coinciden tanto como sea posible.</p> <p>Si deseas un modo <code>no voraz</code> puedes usar operadores no voraces como <code>+?</code> y dem\u00e1s o cambiar todos los operadores a modo no voraz con la ayuda del modificador <code>g</code> (usa las propiedades apropiadas de TRegExpr o el operador <code>?(-g)</code> en r.e.).</p>"},{"location":"faq/#como-analizar-fuentes-como-html-con-la-ayuda-de-tregexpr","title":"\u00bfC\u00f3mo analizar fuentes como HTML con la ayuda de TRegExpr?","text":"<p>Respuesta</p> <p>Lo siento, gente, pero es casi imposible!</p> <p>Por supuesto, puedes usar f\u00e1cilmente TRegExpr para extraer alguna informaci\u00f3n de HTML, como se muestra en mis ejemplos, pero si quieres un an\u00e1lisis preciso tienes que usar un verdadero analizador, no r.e.</p> <p>Puedes leer la explicaci\u00f3n completa en el <code>Perl Cookbook</code> de Tom Christiansen y Nathan Torkington, por ejemplo.</p> <p>En resumen - hay muchas estructuras que pueden ser f\u00e1cilmente analizadas por un verdadero analizador pero de ninguna manera por r.e., y el verdadero analizador es mucho m\u00e1s r\u00e1pido para hacer el an\u00e1lisis, porque r.e. no simplemente escanea la corriente de entrada, realiza una b\u00fasqueda de optimizaci\u00f3n que puede llevar mucho tiempo.</p>"},{"location":"faq/#hay-alguna-manera-de-obtener-multiples-coincidencias-de-un-patron-en-tregexpr","title":"\u00bfHay alguna manera de obtener m\u00faltiples coincidencias de un patr\u00f3n en TRegExpr?","text":"<p>Respuesta</p> <p>Puedes iterar coincidencias con el m\u00e9todo ExecNext.</p> <p>Si deseas alg\u00fan ejemplo, por favor, echa un vistazo a la implementaci\u00f3n del m\u00e9todo <code>TRegExpr.Replace</code> o a los ejemplos para HyperLinksDecorator</p>"},{"location":"faq/#estoy-comprobando-la-entrada-del-usuario-por-que-tregexpr-devuelve-true-para-cadenas-de-entrada-incorrectas","title":"Estoy comprobando la entrada del usuario. \u00bfPor qu\u00e9 TRegExpr devuelve <code>True</code> para cadenas de entrada incorrectas?","text":"<p>Respuesta</p> <p>En muchos casos, los usuarios de TRegExpr olvidan que la expresi\u00f3n regular es para buscar en la cadena de entrada.</p> <p>As\u00ed que, por ejemplo, si usas la expresi\u00f3n <code>\\d{4,4}</code>, tendr\u00e1s \u00e9xito para entradas de usuario incorrectas como <code>12345</code> o <code>cualquier letra 1234</code>.</p> <p>Tienes que verificar desde el inicio hasta el final de la l\u00ednea para asegurarte de que no haya nada m\u00e1s alrededor: <code>^\\d{4,4}$</code>.</p>"},{"location":"faq/#por-que-los-iteradores-no-voraces-a-veces-trabajan-como-en-modo-voraz","title":"\u00bfPor qu\u00e9 los iteradores no voraces a veces trabajan como en modo voraz?","text":"<p>Por ejemplo, el r.e. <code>a+?,b+?</code> aplicado a la cadena <code>aaa,bbb</code> coincide con <code>aaa,b</code>, pero \u00bfno deber\u00eda coincidir con <code>a,b</code> debido a la no voracidad del primer iterador?</p> <p>Respuesta</p> <p>Esto se debe a la forma de trabajar de TRegExpr. De hecho, muchos otros motores de r.e. trabajan exactamente igual: solo realizan una <code>simple</code> optimizaci\u00f3n de b\u00fasqueda, y no intentan hacer la mejor optimizaci\u00f3n.</p> <p>En algunos casos es malo, pero en general es m\u00e1s una ventaja que una limitaci\u00f3n, por razones de rendimiento y previsibilidad.</p> <p>La regla principal - r.e. primero intenta coincidir desde el lugar actual y solo si eso es completamente imposible avanza un car\u00e1cter e intenta de nuevo desde la siguiente posici\u00f3n en el texto.</p> <p>As\u00ed que, si usas <code>a,b+?</code> coincidir\u00e1 con <code>a,b</code>. En el caso de <code>a+?,b+?</code> ahora no se recomienda (a\u00f1adimos modificador no voraz) pero a\u00fan es posible coincidir con m\u00e1s de una <code>a</code>, as\u00ed que TRegExpr lo har\u00e1.</p> <p>TRegExpr como los r.e. de Perl o Unix no intentan avanzar y verificar - ser\u00eda una \"mejor\" coincidencia. En primer lugar, simplemente porque no hay forma de decir que una coincidencia es mejor o peor.</p>"},{"location":"faq/#como-puedo-usar-tregexpr-con-borland-c-builder","title":"\u00bfC\u00f3mo puedo usar TRegExpr con Borland C++ Builder?","text":"<p>Tengo un problema ya que no hay disponible un archivo de cabecera (<code>.h</code> o <code>.hpp</code>).</p> <p>Respuesta</p> <ul> <li>Agrega <code>RegExpr.pas</code> al proyecto <code>bcb</code>.</li> <li>Compila el proyecto. Esto genera el archivo de cabecera <code>RegExpr.hpp</code>.</li> <li>Ahora puedes escribir c\u00f3digo que use la unidad <code>RegExpr</code>.</li> <li>No olvides a\u00f1adir <code>#include \u201cRegExpr.hpp\u201d</code> donde sea necesario.</li> <li>No olvides reemplazar todos los <code>\\</code> en las expresiones regulares con <code>\\\\</code> o redefinir la constante EscChar.</li> </ul>"},{"location":"faq/#por-que-muchos-re-incluyendo-re-de-la-ayuda-y-demo-de-tregexpr-funcionan-mal-en-borland-c-builder","title":"\u00bfPor qu\u00e9 muchos r.e. (incluyendo r.e. de la ayuda y demo de TRegExpr) funcionan mal en Borland C++ Builder?","text":"<p>Respuesta</p> <p>La pista est\u00e1 en la pregunta anterior ;) El s\u00edmbolo <code>\\</code> tiene un significado especial en <code>C++</code>, por lo que tienes que <code>escaparlo</code> (como se describi\u00f3 en la respuesta anterior). Pero si no te gustan los r.e. como <code>\\\\w+\\\\w+\\\\.\\\\w+</code> puedes redefinir la constante <code>EscChar</code> (en <code>RegExpr.pas</code>). Por ejemplo <code>EscChar = \"/\"</code>. Entonces puedes escribir <code>/w+/w+/./w+</code>, parece inusual pero es m\u00e1s legible.</p>"},{"location":"regular_expressions/","title":"Expresiones regulares (RegEx)","text":""},{"location":"regular_expressions/#introduccion","title":"Introducci\u00f3n","text":"<p>Las expresiones regulares son una forma pr\u00e1ctica de especificar patrones de texto.</p> <p>Con las expresiones regulares puedes validar entradas de usuario, buscar patrones como correos electr\u00f3nicos o n\u00fameros de tel\u00e9fono en p\u00e1ginas web o en documentos, y mucho m\u00e1s.</p> <p>A continuaci\u00f3n, se encuentra la hoja de trucos completa de expresiones regulares.</p>"},{"location":"regular_expressions/#caracteres","title":"Caracteres","text":""},{"location":"regular_expressions/#coincidencias-simples","title":"Coincidencias simples","text":"<p>Cualquier car\u00e1cter individual (excepto los caracteres especiales de regex) coincide consigo mismo. Una serie de caracteres (no especiales) coincide con esa serie de caracteres en la cadena de entrada.</p> RegEx Coincidencias <code>foobar</code> <code>foobar</code>"},{"location":"regular_expressions/#caracteres-no-imprimibles-codigos-de-escape","title":"Caracteres no imprimibles (c\u00f3digos de escape)","text":"<p>Para especificar un car\u00e1cter por su c\u00f3digo Unicode, usa el prefijo <code>\\x</code> seguido por el c\u00f3digo hexadecimal. Para c\u00f3digos de 3-4 d\u00edgitos (despu\u00e9s de U+00FF), encierra el c\u00f3digo entre llaves.</p> RegEx Coincidencias <code>\\xAB</code> car\u00e1cter con c\u00f3digo hexadecimal <code>AB</code> de 2 d\u00edgitos <code>\\x{AB20}</code> car\u00e1cter con c\u00f3digo hexadecimal <code>AB20</code> de 1..4 d\u00edgitos <code>foo\\x20bar</code> <code>foo bar</code> (nota el espacio en el medio) <p>Hay una serie de c\u00f3digos de escape predefinidos para caracteres no imprimibles, como en el lenguaje C:</p> RegEx Coincidencias <code>\\t</code> tabulador (HT/TAB), igual a <code>\\x09</code> <code>\\n</code> salto de l\u00ednea (LF), igual a <code>\\x0a</code> <code>\\r</code> retorno de carro (CR), igual a <code>\\x0d</code> <code>\\f</code> avance de p\u00e1gina (FF), igual a <code>\\x0c</code> <code>\\a</code> alarma (BEL), igual a <code>\\x07</code> <code>\\e</code> escape (ESC), igual a <code>\\x1b</code> <code>\\cA</code> ... <code>\\cZ</code> chr(0) a chr(25). Por ejemplo, <code>\\cI</code> coincide con el car\u00e1cter de tabulaci\u00f3n. Las letras min\u00fasculas \"a\"...\"z\" tambi\u00e9n son compatibles."},{"location":"regular_expressions/#escapando","title":"Escapando","text":"<p>Para representar un car\u00e1cter especial de regex (uno de <code>.+*?|\\()[]{}^$</code>), ponle un prefijo con una barra invertida <code>\\</code>. La barra invertida literal tambi\u00e9n debe ser escapada.</p> RegEx Coincidencias <code>\\^FooBarPtr</code> <code>^FooBarPtr</code>, esto es <code>^</code> y no inicio de l\u00ednea <code>\\[a\\]</code> <code>[a]</code>, esto no es una clase de car\u00e1cter"},{"location":"regular_expressions/#clases-de-caracteres","title":"Clases de caracteres","text":""},{"location":"regular_expressions/#clases-de-caracteres-definidas-por-el-usuario","title":"Clases de caracteres definidas por el usuario","text":"<p>Una clase de caracteres es una lista de caracteres dentro de corchetes <code>[]</code>. La clase coincide con cualquier car\u00e1cter individual listado en esta clase.</p> RegEx Coincidencias <code>foob[aeiou]r</code> <code>foobar</code>, <code>foober</code>, etc. pero no <code>foobbr</code>, <code>foobcr</code>, etc. <p>Puedes \"invertir\" la clase: si el primer car\u00e1cter despu\u00e9s del <code>[</code> es <code>^</code>, entonces la clase coincide con cualquier car\u00e1cter excepto los caracteres listados en la clase.</p> RegEx Coincidencias <code>foob[^aeiou]r</code> <code>foobbr</code>, <code>foobcr</code>, etc. pero no <code>foobar</code>, <code>foober</code>, etc. <p>Dentro de una lista, el car\u00e1cter guion <code>-</code> se usa para especificar un rango, de modo que <code>a-z</code> representa todos los caracteres entre <code>a</code> y <code>z</code>, inclusivos.</p> <p>Si quieres que el guion <code>-</code> sea miembro de una clase, col\u00f3calo al inicio o al final de la lista, o esc\u00e1palo con una barra invertida.</p> <p>Si quieres que <code>]</code> sea parte de la clase, puedes colocarlo al inicio de la lista o escaparlo con una barra invertida.</p> RegEx Coincidencias <code>[-az]</code> <code>a</code>, <code>z</code> y <code>-</code> <code>[az-]</code> <code>a</code>, <code>z</code> y <code>-</code> <code>[a\\-z]</code> <code>a</code>, <code>z</code> y <code>-</code> <code>[a-z]</code> caracteres de <code>a</code> a <code>z</code> <code>[\\n-\\x0D]</code> caracteres de chr(10) a chr(13)"},{"location":"regular_expressions/#meta-caracter-punto","title":"Meta-car\u00e1cter punto","text":"<p>El meta-car\u00e1cter <code>.</code> (punto) por defecto coincide con cualquier car\u00e1cter. Pero si desactivas el modificador /s, entonces no coincidir\u00e1 con caracteres de salto de l\u00ednea.</p> <p>El <code>.</code> no act\u00faa como meta-clase dentro de clases de caracteres definidas por el usuario. <code>[.]</code> significa un \".\" literal.</p>"},{"location":"regular_expressions/#meta-clases","title":"Meta-clases","text":"<p>Hay una serie de clases de caracteres predefinidas que hacen que las expresiones regulares sean m\u00e1s compactas, \"meta-clases\":</p> RegEx Coincidencias <code>\\w</code> un car\u00e1cter alfanum\u00e9rico, incluyendo <code>_</code> <code>\\W</code> un car\u00e1cter no alfanum\u00e9rico <code>\\d</code> un car\u00e1cter num\u00e9rico (igual a <code>[0-9]</code>) <code>\\D</code> un car\u00e1cter no num\u00e9rico <code>\\s</code> cualquier espacio (igual a <code>[ \\t\\n\\r\\f]</code>) <code>\\S</code> un no-espacio <code>\\h</code> espacio horizontal: el tabulador y todos los caracteres en la categor\u00eda \"separador de espacio\" de Unicode <code>\\H</code> no un espacio horizontal <code>\\v</code> espacio vertical: todos los caracteres tratados como saltos de l\u00ednea en el est\u00e1ndar Unicode <code>\\V</code> no un espacio vertical <code>\\R</code> salto de l\u00ednea Unicode: LF, par CR LF, CR, FF (avance de p\u00e1gina), VT (tabulador vertical), U+0085, U+2028, U+2029 <p>Puedes usar todas las meta-clases mencionadas en la tabla anterior dentro de clases de caracteres definidas por el usuario.</p> RegEx Coincidencias <code>foob\\dr</code> <code>foob1r</code>, <code>foob6r</code>, etc. pero no <code>foobar</code>, <code>foobbr</code>, etc. <code>foob[\\w\\s]r</code> <code>foobar</code>, <code>foob r</code>, <code>foobbr</code>, etc. pero no <code>foob1r</code>, <code>foob=r</code>, etc. <p>TRegExpr</p> <p>Las propiedades SpaceChars y WordChars definen las clases de caracteres <code>\\w</code>, <code>\\W</code>, <code>\\s</code>, <code>\\S</code>.</p> <p>As\u00ed puedes redefinir estas clases.</p>"},{"location":"regular_expressions/#limites","title":"L\u00edmites","text":""},{"location":"regular_expressions/#limites-de-linea","title":"L\u00edmites de l\u00ednea","text":"Meta-car\u00e1cter Coincidencias <code>^</code> coincidencia de longitud cero al inicio de la l\u00ednea <code>$</code> coincidencia de longitud cero al final de la l\u00ednea <code>\\A</code> coincidencia de longitud cero en el inicio absoluto <code>\\z</code> coincidencia de longitud cero en el final absoluto <code>\\Z</code> como <code>\\z</code> pero tambi\u00e9n coincide antes del salto de l\u00ednea final <code>\\G</code> coincidencia de longitud cero en la posici\u00f3n final de la coincidencia anterior <p>Ejemplos:</p> RegEx Coincidencias <code>^foobar</code> <code>foobar</code> solo si est\u00e1 al inicio de la l\u00ednea <code>foobar$</code> <code>foobar</code> solo si est\u00e1 al final de la l\u00ednea <code>^foobar$</code> <code>foobar</code> solo si es la \u00fanica cadena en la l\u00ednea <code>foob.r</code> <code>foobar</code>, <code>foobbr</code>, <code>foob1r</code>, etc. <p>El meta-car\u00e1cter <code>^</code> coincide con una posici\u00f3n de longitud cero al inicio de la cadena de entrada. <code>$</code> - al final. Si el modificador /m est\u00e1 activado, tambi\u00e9n coinciden al inicio/final de l\u00edneas individuales en el texto de varias l\u00edneas.</p> <p>Nota que no hay una l\u00ednea vac\u00eda dentro de la secuencia <code>\\x0D\\x0A</code>.</p> <p>TRegExpr</p> <p>Si est\u00e1s usando la versi\u00f3n Unicode, entonces <code>^</code>/<code>$</code> tambi\u00e9n coinciden con <code>\\x2028</code>, <code>\\x2029</code>, <code>\\x0B</code>, <code>\\x0C</code> o <code>\\x85</code>.</p> <p>El metacar\u00e1cter <code>\\A</code> coincide con la posici\u00f3n de longitud cero justo al principio del texto de entrada, <code>\\z</code> - al final absoluto. Ignoran el modificador /m. <code>\\Z</code> es como <code>\\z</code>, pero tambi\u00e9n coincide antes del salto de l\u00ednea final (LF y CR LF). El comportamiento de <code>\\A</code>, <code>\\z</code>, <code>\\Z</code> est\u00e1 hecho como en la mayor\u00eda de los principales motores de regex (Perl, PCRE, etc.).</p> <p>Nota que <code>^.*$</code> no coincide con un texto entre <code>\\x0D\\x0A</code>, porque esto es un separador de l\u00ednea inquebrantable. Pero coincide con el texto vac\u00edo dentro de la secuencia <code>\\x0A\\x0D</code> porque esto son 2 saltos de l\u00ednea en el orden incorrecto.</p> <p>TRegExpr</p> <p>El procesamiento de m\u00faltiples l\u00edneas puede ser ajustado por las propiedades LineSeparators y UseLinePairedBreak.</p> <p>As\u00ed puedes usar separadores al estilo Unix <code>\\n</code> o al estilo DOS/Windows <code>\\r\\n</code> o mezclarlos juntos (como en el comportamiento predeterminado descrito arriba).</p> <p>Si prefieres una descripci\u00f3n matem\u00e1ticamente correcta, puedes encontrarla en www.unicode.org.</p>"},{"location":"regular_expressions/#limites-de-palabra","title":"L\u00edmites de palabra","text":"RegEx Coincidencias <code>\\b</code> un l\u00edmite de palabra <code>\\B</code> un no-l\u00edmite de palabra <p>Un l\u00edmite de palabra <code>\\b</code> es un punto entre dos caracteres que tiene un <code>\\w</code> en un lado y un <code>\\W</code> en el otro lado (en cualquier orden).</p>"},{"location":"regular_expressions/#cuantificacion","title":"Cuantificaci\u00f3n","text":""},{"location":"regular_expressions/#cuantificadores","title":"Cuantificadores","text":"<p>Cualquier elemento de una expresi\u00f3n regular puede ser seguido por un cuantificador. Un cuantificador especifica el n\u00famero de repeticiones del elemento.</p> RegEx Coincidencias <code>{n}</code> exactamente <code>n</code> veces <code>{n,}</code> al menos <code>n</code> veces <code>{,m}</code> no m\u00e1s de <code>m</code> veces (solo con AllowBraceWithoutMin) <code>{n,m}</code> al menos <code>n</code> pero no m\u00e1s de <code>m</code> veces <code>*</code> cero o m\u00e1s veces, similar a <code>{0,}</code> <code>+</code> una o m\u00e1s veces, similar a <code>{1,}</code> <code>?</code> cero o una vez, similar a <code>{0,1}</code> <p>As\u00ed, los d\u00edgitos entre llaves <code>{n,m}</code> especifican el n\u00famero m\u00ednimo de veces <code>n</code> y el m\u00e1ximo <code>m</code>.</p> <p><code>{n}</code> es equivalente a <code>{n,n}</code> y coincide exactamente <code>n</code> veces. <code>{n,}</code> coincide <code>n</code> o m\u00e1s veces.</p> <p>La variante <code>{,m}</code> solo se admite si se establece la propiedad AllowBraceWithoutMin.</p> <p>No hay un l\u00edmite pr\u00e1ctico para los valores n y m (el l\u00edmite es el valor m\u00e1ximo de 32 bits con signo).</p> <p>Usar <code>{</code> sin un rango correcto dar\u00e1 un error. Este comportamiento puede cambiarse estableciendo la propiedad AllowLiteralBraceWithoutRange, que aceptar\u00e1 <code>{</code> como un car\u00e1cter literal, si no est\u00e1 seguido por un rango. Un rango con un valor bajo mayor que el alto siempre dar\u00e1 un error.</p> RegEx Coincidencias <code>foob.*r</code> <code>foobar</code>, \u00a0<code>foobalkjdflkj9r</code> y <code>foobr</code> <code>foob.+r</code> <code>foobar</code>, <code>foobalkjdflkj9r</code> pero no <code>foobr</code> <code>foob.?r</code> <code>foobar</code>, <code>foobbr</code> y <code>foobr</code> pero no <code>foobalkj9r</code> <code>fooba{2}r</code> <code>foobaar</code> <code>fooba{2,}r</code> <code>foobaar</code>, <code>foobaaar</code>, <code>foobaaaar</code>, etc. <code>fooba{2,3}r</code> <code>foobaar</code>, o <code>foobaaar</code> \u00a0pero no <code>foobaaaar</code> <code>(foobar){8,10}</code> 8...10 instancias de <code>foobar</code> (<code>()</code> es grupo) <p></p>"},{"location":"regular_expressions/#codicia","title":"Codicia","text":"<p>Los Cuantificadores en modo \"codicioso\" toman tanto como sea posible, en modo \"perezoso\" - lo menos posible.</p> <p>Por defecto todos los cuantificadores son \"codiciosos\". Agrega el car\u00e1cter <code>?</code> para hacer cualquier cuantificador \"perezoso\".</p> <p>Para la cadena <code>abbbbc</code>:</p> RegEx Coincidencias <code>b+</code> <code>bbbb</code> <code>b+?</code> <code>b</code> <code>b*?</code> cadena vac\u00eda <code>b{2,3}?</code> <code>bb</code> <code>b{2,3}</code> <code>bbb</code> <p>Puedes cambiar todos los cuantificadores a modo \"perezoso\" (modificador /g, abajo usamos cambio de modificador en l\u00ednea).</p> RegEx Coincidencias <code>(?-g)b+</code> <code>b</code>"},{"location":"regular_expressions/#cuantificador-posesivo","title":"Cuantificador Posesivo","text":"<p>La sintaxis es: <code>a++</code>, <code>a*+</code>, <code>a?+</code>, <code>a{2,4}+</code>. Actualmente solo se soporta para llaves simples, pero no para llaves despu\u00e9s de un grupo como <code>(foo|bar){3,5}+</code>.</p> <p>Esta caracter\u00edstica de regex est\u00e1 descrita aqu\u00ed. En resumen, el cuantificador posesivo acelera la coincidencia en casos complejos.</p>"},{"location":"regular_expressions/#eleccion","title":"Elecci\u00f3n","text":"<p>Las expresiones en la elecci\u00f3n se separan por la barra vertical <code>|</code>.</p> <p>Entonces <code>fee|fie|foe</code> coincidir\u00e1 con cualquiera de <code>fee</code>, <code>fie</code>, o <code>foe</code> en la cadena objetivo (como lo har\u00eda <code>f(e|i|o)e</code>).</p> <p>La primera expresi\u00f3n incluye todo desde el \u00faltimo delimitador de patr\u00f3n (<code>(</code>, <code>[</code>, o el comienzo del patr\u00f3n) hasta el primer <code>|</code>, y la \u00faltima expresi\u00f3n contiene todo desde el \u00faltimo <code>|</code> hasta el siguiente delimitador de patr\u00f3n.</p> <p>Suena un poco complicado, por lo que es pr\u00e1ctica com\u00fan incluir la elecci\u00f3n en par\u00e9ntesis, para minimizar la confusi\u00f3n sobre d\u00f3nde comienza y termina.</p> <p>Las expresiones en la elecci\u00f3n se prueban de izquierda a derecha, por lo que la primera expresi\u00f3n que coincide, es la que se elige.</p> <p>Por ejemplo, la expresi\u00f3n regular <code>foo|foot</code> en la cadena <code>barefoot</code> coincidir\u00e1 con <code>foo</code>. Solo la primera expresi\u00f3n que coincide.</p> <p>Tambi\u00e9n recuerda que <code>|</code> se interpreta como literal dentro de corchetes, as\u00ed que si escribes <code>[fee|fie|foe]</code> realmente solo est\u00e1s coincidiendo con <code>[feio|]</code>.</p> RegEx Coincidencias <code>foo(bar|foo)</code> <code>foobar</code> o <code>foofoo</code> <p></p>"},{"location":"regular_expressions/#grupos","title":"Grupos","text":"<p>Los par\u00e9ntesis <code>()</code> se usan para definir grupos (es decir, subexpresiones).</p> <p>[!NOTE] TRegExpr</p> <p>Las posiciones de los grupos, longitudes y valores actuales estar\u00e1n en MatchPos, MatchLen y Match.</p> <p>Puedes sustituirlos con Substitute.</p> <p>Los grupos se numeran de izquierda a derecha por su par\u00e9ntesis de apertura (incluyendo grupos anidados). El primer grupo tiene el \u00edndice 1. El regex completo tiene el \u00edndice 0.</p> Grupo Valor 0 <code>foobar</code> 1 <code>foobar</code> 2 <code>bar</code>"},{"location":"regular_expressions/#retroreferencias","title":"Retroreferencias","text":"<p>Los metacaracteres <code>\\1</code> hasta <code>\\9</code> se interpretan como retroreferencias a grupos capturados. Coinciden con el grupo encontrado previamente con el \u00edndice especificado.</p> <p>El metacar\u00e1cter <code>\\g</code> seguido por un n\u00famero tambi\u00e9n se interpreta como retroreferencias a grupos capturados. Puede ser seguido por un n\u00famero de varios d\u00edgitos.</p> RegEx Coincidencias <code>(.)\\1+</code> <code>aaaa</code> y <code>cc</code> <code>(.+)\\1+</code> tambi\u00e9n <code>abab</code> y <code>123123</code> <code>(.)\\g1+</code> <code>aaaa</code> y <code>cc</code> <p>RegEx <code>(['\"]?)(\\d+)\\1</code> coincide con <code>\"13\"</code> (entre comillas dobles), o <code>'4'</code> (en comillas simples) o <code>77</code> (sin comillas), etc.</p>"},{"location":"regular_expressions/#grupos-nombrados-y-retroreferencias","title":"Grupos Nombrados y Retroreferencias","text":"<p>Los grupos nombrados en expresiones regulares te permiten etiquetar una parte de tu patr\u00f3n.  Esto hace que tus patrones sean m\u00e1s f\u00e1ciles de entender y actualizar.</p> <p>Para crear un grupo nombrado, usa <code>(?&lt;name&gt;pattern)</code> o <code>(?'name'pattern)</code>,  donde <code>name</code> es el nombre del grupo y <code>pattern</code> es el patr\u00f3n regex que quieres capturar.</p> <p>Las referencias hacia atr\u00e1s te permiten coincidir con el mismo texto que un grupo captur\u00f3 anteriormente.  Las referencias hacia atr\u00e1s nombradas usan <code>\\k&lt;name&gt;</code>, donde <code>name</code> es el nombre del grupo que quieres coincidir nuevamente.</p> <p>TRegExpr tambi\u00e9n admite la versi\u00f3n de Perl: <code>(?P&lt;name&gt;pattern)</code> para definir un grupo nombrado y <code>(?P=name)</code>  para referencias hacia atr\u00e1s.</p> <p>Ejemplo</p> RegEx Coincidencias <code>(?P&lt;qq&gt;['\"])\\w+(?P=qq)</code> <code>\"palabra\"</code> y <code>'palabra'</code>"},{"location":"regular_expressions/#resultado-coincidente","title":"Resultado Coincidente","text":"<p>El inicio de la coincidencia reportada se puede establecer usando <code>\\K</code>.</p> <p>Por defecto, todo el texto cubierto por un patr\u00f3n se considera coincidente. Sin embargo, es posible establecer expl\u00edcitamente lo que se informar\u00e1.</p> <p>El patr\u00f3n <code>a\\Kb</code> requerir\u00e1 que el texto contenga \"ab\". Pero solo el \"b\" se informar\u00e1 como coincidente. Puede haber varios <code>\\K</code> en un patr\u00f3n, El \u00faltimo establecer\u00e1 la posici\u00f3n de inicio de la coincidencia. Solo <code>\\K</code> en partes activas del patr\u00f3n se consideran. Por ejemplo, <code>a(\\Kb)?</code> no considerar\u00e1 <code>\\K</code> si no hay \"b\". Las capturas pueden existir fuera del conjunto de coincidencias establecido por <code>\\K</code>.</p> <p>Si se usa en otras construcciones que pueden aplicarse fuera de la coincidencia informada (como la anticipaci\u00f3n positiva), entonces la posici\u00f3n marcada por <code>\\K</code> debe estar antes o en el final reportado de la coincidencia. Si la posici\u00f3n se marca m\u00e1s tarde, la coincidencia se considera fallida.</p> <p><code>\\K</code> es algo similar a una mirada atr\u00e1s. A diferencia de una mirada atr\u00e1s, la parte del patr\u00f3n antes del <code>\\K</code> debe estar despu\u00e9s de la posici\u00f3n de inicio de la coincidencia, si el patr\u00f3n se aplica desde una posici\u00f3n de desplazamiento dentro del texto.</p>"},{"location":"regular_expressions/#modificadores","title":"Modificadores","text":"<p>Los modificadores son para cambiar el comportamiento de las expresiones regulares.</p> <p>Puedes establecer modificadores globalmente en tu sistema o cambiar dentro de la expresi\u00f3n regular usando (?imsxr-imsxr).</p> <p>TRegExpr</p> <p>Para cambiar modificadores usa ModifierStr o las propiedades apropiadas de <code>TRegExpr</code> Modifier*.</p> <p>Los valores predeterminados est\u00e1n definidos en variables globales. Por ejemplo, la variable global <code>RegExprModifierX</code> define el valor predeterminado para la propiedad <code>ModifierX</code>.</p> <p></p>"},{"location":"regular_expressions/#i-insensible-a-mayusculas","title":"i, insensible a may\u00fasculas","text":"<p>Insensible a may\u00fasculas. Usa la configuraci\u00f3n de localizaci\u00f3n instalada en tu sistema, ver tambi\u00e9n InvertCase.</p> <p></p>"},{"location":"regular_expressions/#m-cadenas-multilinea","title":"m, cadenas multil\u00ednea","text":"<p>Trata la cadena como m\u00faltiples l\u00edneas. As\u00ed <code>^</code> y <code>$</code> coinciden con el inicio o fin de cualquier l\u00ednea en cualquier lugar dentro de la cadena.</p> <p>Ver tambi\u00e9n L\u00edmites de L\u00ednea.</p> <p></p>"},{"location":"regular_expressions/#s-cadenas-de-una-sola-linea","title":"s, cadenas de una sola l\u00ednea","text":"<p>Trata la cadena como una sola l\u00ednea. As\u00ed <code>.</code> coincide con cualquier car\u00e1cter, incluso un separador de l\u00edneas.</p> <p>Ver tambi\u00e9n L\u00edmites de L\u00ednea, con el que normalmente no coincidir\u00eda.</p> <p></p>"},{"location":"regular_expressions/#g-codicia","title":"g, codicia","text":"<p>TRegExpr solo modificador.</p> <p>Al desactivarlo cambiar\u00e1s cuantificadores a modo no codicioso.</p> <p>Entonces, si el modificador <code>/g</code> est\u00e1 <code>Off</code> entonces <code>+</code> funciona como <code>+?</code>, <code>*</code> como <code>*?</code> y as\u00ed sucesivamente.</p> <p>Por defecto este modificador est\u00e1 <code>On</code>.</p> <p></p>"},{"location":"regular_expressions/#x-sintaxis-extendida","title":"x, sintaxis extendida","text":"<p>Permite comentar expresiones regulares y dividirlas en m\u00faltiples l\u00edneas.</p> <p>Si el modificador est\u00e1 <code>On</code> ignoramos todos los espacios en blanco que no est\u00e9n escapados ni dentro de una clase de caracteres.</p> <p>Y el car\u00e1cter <code>#</code> separa los comentarios.</p> <p>Nota que puedes usar l\u00edneas vac\u00edas para formatear expresiones regulares para mejor legibilidad:</p> <pre><code>(\n(abc) # comentario 1\n#\n(efg) # comentario 2\n)\n</code></pre> <p>Esto tambi\u00e9n significa que si quieres espacios en blanco reales o caracteres <code>#</code> en el patr\u00f3n (fuera de una clase de caracteres, donde no se ven afectados por <code>/x</code>), tendr\u00e1s que escaparlos o codificarlos usando escapes octales o hexadecimales.</p> <p></p>"},{"location":"regular_expressions/#r-rangos-rusos","title":"r, rangos rusos","text":"<p>TRegExpr solo modificador.</p> <p>En la tabla ASCII rusa los caracteres <code>\u0451</code>/<code>\u0401</code> est\u00e1n colocados separadamente de otros.</p> <p>Los caracteres rusos grandes y peque\u00f1os est\u00e1n en rangos separados, esto es lo mismo que con los caracteres ingleses pero aun as\u00ed quer\u00eda alguna forma corta.</p> <p>Con este modificador en lugar de <code>[\u0430-\u044f\u0410-\u042f\u0451\u0401]</code> puedes escribir <code>[\u0430-\u042f]</code> si necesitas todos los caracteres rusos.</p> <p>Cuando el modificador est\u00e1 <code>On</code>:</p> RegEx Coincidencias <code>\u0430-\u044f</code> caracteres de <code>\u0430</code> a <code>\u044f</code> y <code>\u0451</code> <code>\u0410-\u042f</code> caracteres de <code>\u0410</code> a <code>\u042f</code> y <code>\u0401</code> <code>\u0430-\u042f</code> todos los s\u00edmbolos rusos <p>El modificador se establece On por defecto.</p>"},{"location":"regular_expressions/#aserciones-anticipacion-positiva-anticipacion-negativa","title":"Aserciones (anticipaci\u00f3n positiva, anticipaci\u00f3n negativa)","text":"<p>Aserci\u00f3n de anticipaci\u00f3n positiva: <code>foo(?=bar)</code> coincide con \"foo\" solo antes de \"bar\", y \"bar\" se excluye de la coincidencia.</p> <p>Aserci\u00f3n de anticipaci\u00f3n negativa: <code>foo(?!bar)</code> coincide con \"foo\" solo si no est\u00e1 seguido por \"bar\".</p> <p>Aserci\u00f3n de retrospectiva positiva: <code>(?&lt;=foo)bar</code> coincide con \"bar\" solo despu\u00e9s de \"foo\", y \"foo\" se excluye de la coincidencia.</p> <p>Aserci\u00f3n de retrospectiva negativa: <code>(?&lt;!foo)bar</code> coincide con \"bar\" solo si no est\u00e1 precedido por \"foo\".</p> <p>Limitaciones:</p> <ul> <li>Las retrospectivas de longitud variable no est\u00e1n permitidas para contener grupos de captura.   Esto puede ser permitido configurando la propiedad <code>AllowUnsafeLookBehind</code>.   Si esto est\u00e1 habilitado y hay m\u00e1s de una coincidencia en el texto que   el grupo podr\u00eda capturar, entonces la coincidencia incorrecta puede ser capturada. Esto   no afecta la correcci\u00f3n de la aserci\u00f3n en general. (Es decir, la   retrospectiva devolver\u00e1 correctamente si el texto antes coincid\u00eda con el   patr\u00f3n).</li> <li>Las retrospectivas de longitud variable pueden ser lentas en ejecutarse, si no   coinciden.</li> </ul>"},{"location":"regular_expressions/#grupos-no-capturadores","title":"Grupos No Capturadores","text":"<p>La sintaxis es as\u00ed: <code>(?:expr)</code>.</p> <p>Tales grupos no tienen \"\u00edndice\" y son invisibles para retroreferencias. Los grupos no capturadores se utilizan cuando quieres agrupar una subexpresi\u00f3n, pero no quieres guardarla como una parte capturada/coincidente de la cadena. Entonces esto es solo una forma de organizar tu regex en subexpresiones sin el sobrecosto de capturar el resultado:</p> RegEx Coincidencias <code>(https?|ftp)://([^/\\r\\n]+)</code> en <code>https://sorokin.engineer</code> coincide <code>https</code> y <code>sorokin.engineer</code> <code>(?:https?|ftp)://([^/\\r\\n]+)</code> en <code>https://sorokin.engineer</code> solo coincide <code>sorokin.engineer</code>"},{"location":"regular_expressions/#grupos-atomicos","title":"Grupos At\u00f3micos","text":"<p>La sintaxis es as\u00ed: <code>(?&gt;expr|expr|...)</code>.</p> <p>Los grupos at\u00f3micos son un caso especial de grupos no capturadores. Descripci\u00f3n de ellos.</p>"},{"location":"regular_expressions/#modificadores-en-linea","title":"Modificadores En L\u00ednea","text":"<p>Sintaxis para un modificador: <code>(?i)</code> para activar, y <code>(?-i)</code> para desactivar. Se permiten muchos modificadores as\u00ed: <code>(?msgxr-imsgxr)</code>.</p> <p>Puedes usarlo dentro de la expresi\u00f3n regular para modificar los modificadores en tiempo real. Esto puede ser especialmente \u00fatil porque tiene alcance local en una expresi\u00f3n regular. Solo afecta esa parte de la expresi\u00f3n regular que sigue al operador <code>(?imsgxr-imsgxr)</code>.</p> <p>Y si est\u00e1 dentro de un grupo, afectar\u00e1 solo a este grupo - espec\u00edficamente la parte del grupo que sigue a los modificadores. Entonces en <code>((?i)Saint)-Petersburg</code> afecta solo al grupo <code>((?i)Saint)</code> por lo que coincidir\u00e1 con <code>saint-Petersburg</code> pero no con <code>saint-petersburg</code>.</p> <p>Los modificadores en l\u00ednea tambi\u00e9n se pueden dar como parte de un grupo no capturador: <code>(?i:patr\u00f3n)</code>.</p> RegEx Coincidencias <code>(?i)Saint-Petersburg</code> <code>Saint-petersburg</code> y <code>Saint-Petersburg</code> <code>(?i)Saint-(?-i)Petersburg</code> <code>Saint-Petersburg</code> pero no <code>Saint-petersburg</code> <code>(?i)(Saint-)?Petersburg</code> <code>Saint-petersburg</code> y <code>saint-petersburg</code> <code>((?i)Saint-)?Petersburg</code> <code>saint-Petersburg</code>, pero no <code>saint-petersburg</code>"},{"location":"regular_expressions/#comentarios","title":"Comentarios","text":"<p>La sintaxis es as\u00ed: <code>(?#texto)</code>. El texto dentro de los corchetes se ignora.</p> <p>Nota que el comentario se cierra por el <code>)</code> m\u00e1s cercano, por lo que no hay forma de poner un <code>)</code> literal en el comentario.</p>"},{"location":"regular_expressions/#recursion","title":"Recursi\u00f3n","text":"<p>La sintaxis es <code>(?R)</code>, el alias es <code>(?0)</code>.</p> <p>El regex <code>a(?R)?z</code> coincide con una o m\u00e1s letras \"a\" seguidas por exactamente el mismo n\u00famero de letras \"z\".</p> <p>El prop\u00f3sito principal de la recursi\u00f3n es coincidir con construcciones equilibradas o anidadas. El regex gen\u00e9rico es <code>b(?:m|(?R))*e</code> donde \"b\" es lo que comienza la construcci\u00f3n, \"m\" es lo que puede ocurrir en medio de la construcci\u00f3n, y \"e\" es lo que ocurre al final de la construcci\u00f3n.</p> <p>Si lo que puede aparecer en medio de la construcci\u00f3n equilibrada tambi\u00e9n puede aparecer por s\u00ed solo sin las partes de inicio y final, entonces el regex gen\u00e9rico es <code>b(?R)*e|m</code>.</p>"},{"location":"regular_expressions/#llamadas-a-subrutinas","title":"Llamadas a Subrutinas","text":"<p>Sintaxis para llamar a grupos numerados: <code>(?1)</code> ... <code>(?90)</code> (el \u00edndice m\u00e1ximo est\u00e1 limitado por el c\u00f3digo).</p> <p>Sintaxis para llamar a grupos nombrados: <code>(?P&gt;nombre)</code>. Tambi\u00e9n se soporta la sintaxis <code>(?&amp;name)</code>, <code>\\g&lt;name&gt;</code> and <code>\\g'name'</code>.</p> <p>Esto es como la recursi\u00f3n pero solo llama al c\u00f3digo del grupo de captura con el \u00edndice especificado.</p>"},{"location":"regular_expressions/#categorias-unicode","title":"Categor\u00edas Unicode","text":"<p>El est\u00e1ndar Unicode tiene nombres para categor\u00edas de caracteres. Estas son cadenas de 2 letras. Por ejemplo, \"Lu\" son letras may\u00fasculas, \"Ll\" son letras min\u00fasculas. Y la categor\u00eda m\u00e1s grande de 1 letra \"L\" es para todas las letras.</p> <ul> <li>Cc - Control</li> <li>Cf - Formato</li> <li>Co - Uso Privado</li> <li>Cs - Sustituto</li> <li>Ll - Letra Min\u00fascula</li> <li>Lm - Letra Modificadora</li> <li>Lo - Otra Letra</li> <li>Lt - Letra de T\u00edtulo</li> <li>Lu - Letra May\u00fascula</li> <li>Mc - Marca de Espaciado</li> <li>Me - Marca de Encerramiento</li> <li>Mn - Marca No Espaciadora</li> <li>Nd - N\u00famero Decimal</li> <li>Nl - N\u00famero de Letra</li> <li>No - Otro N\u00famero</li> <li>Pc - Puntuaci\u00f3n de Conector</li> <li>Pd - Puntuaci\u00f3n de Guion</li> <li>Pe - Puntuaci\u00f3n de Cierre</li> <li>Pf - Puntuaci\u00f3n Final</li> <li>Pi - Puntuaci\u00f3n Inicial</li> <li>Po - Otra Puntuaci\u00f3n</li> <li>Ps - Puntuaci\u00f3n de Apertura</li> <li>Sc - S\u00edmbolo de Moneda</li> <li>Sk - S\u00edmbolo Modificador</li> <li>Sm - S\u00edmbolo Matem\u00e1tico</li> <li>So - Otro S\u00edmbolo</li> <li>Zl - Separador de L\u00ednea</li> <li>Zp - Separador de P\u00e1rrafo</li> <li>Zs - Separador de Espacio</li> </ul> <p>El metacar\u00e1cter <code>\\p</code> denota un car\u00e1cter Unicode de la categor\u00eda especificada. Sintaxis: <code>\\pL</code> y <code>\\p{L}</code> para nombre de 1 letra, <code>\\p{Lu}</code> para nombres de 2 letras.</p> <p>El metacar\u00e1cter <code>\\P</code> es inverso, denota un car\u00e1cter Unicode no en la categor\u00eda especificada.</p> <p>Estos metacaracteres tambi\u00e9n se soportan dentro de clases de caracteres.</p>"},{"location":"regular_expressions/#palabras-finales","title":"Palabras Finales","text":"<p>En este antiguo post de blog del siglo pasado ilustro algunos usos de las expresiones regulares.</p>"},{"location":"tregexpr/","title":"TRegExpr","text":"<p>To use it, copy files \"regexpr.pas\", \"regexpr_unorteicodedata.pas\", \"regexpr_compilers.inortec\", to your project folder.</p> <p>The library is already inortecluded inorteto Lazarus (Free Pascal) project so you do norteot norteeed to copy anorteythinorteg if you use Lazarus.</p>"},{"location":"tregexpr/#clase-tregexpr","title":"Clase TRegExpr","text":""},{"location":"tregexpr/#versionortemajor-versionorteminorteor","title":"VersionorteMajor, VersionorteMinorteor","text":"<p>Returnorte major anorted minorteor versionorte of the componorteenortet.</p> <pre><code>VersionorteMajor = 1\nVersionorteMinorteor = 101\n</code></pre>"},{"location":"tregexpr/#expresionorte","title":"Expresi\u00f3norte","text":"<p>Expresi\u00f3norte regular.</p> <p>For optimizationorte, regular expressionorte is automatically compiled inorteto P-code. Humanorte-readable form of the P-code is returnorteed by Tugurio.</p> <p>Inorte case of anortey errors inorte compilationorte, <code>Error</code> method is called (by default <code>Error</code> raises exceptionorte ERegExpr).</p>"},{"location":"tregexpr/#modificadorestr","title":"Modificadorestr","text":"<p>Set or get values of regular expressionorte modifiers.</p> <p>Format of the strinorteg is similar to (?ismx-ismx). For example <code>Modificadorestr := \u2018i-x\u2019</code> will switch onorte the modifier /i, switch off /x anorted leave unortechanorteged others.</p> <p>Si inortetenorteta conortefigurar unorte modificador norteo compatible, se llamar\u00e1 a <code>Error</code>.</p>"},{"location":"tregexpr/#modificador","title":"Modificador","text":"<p>Modifier /i, \"case-inortesenortesitive\", inorteitialized with RegExprModificador value.</p>"},{"location":"tregexpr/#modificador-r","title":"Modificador r","text":"<p>Modifier /r, \"Russianorte ranortege extenortesionorte\", inorteitialized with RegExprModificador r value.</p>"},{"location":"tregexpr/#modificadores","title":"Modificadores","text":"<p>Modifier /s, \"sinortegle linortee strinortegs\", inorteitialized with RegExprModificadores value.</p>"},{"location":"tregexpr/#modificadorg","title":"ModificadorG","text":"<p>Modifier /g, \"greedinorteess\", inorteitialized with RegExprModificadorG value.</p>"},{"location":"tregexpr/#modificador_1","title":"Modificador","text":"<p>Modifier /m, \"multi-linortee strinortegs\", inorteitialized with RegExprModificador value.</p>"},{"location":"tregexpr/#modificador-x","title":"Modificador x","text":"<p>Modifier /x, \"eXtenorteded synortetax\", inorteitialized with RegExprModificador x value.</p>"},{"location":"tregexpr/#exec","title":"Exec","text":"<p>Finorteds regular expressionorte againortest <code>AInorteputStrinorteg</code>, startinorteg from the beginortenorteinorteg.</p> <p>The overloaded <code>Exec</code> versionorte without <code>AInorteputStrinorteg</code> exists, it uses <code>AInorteputStrinorteg</code> from previous call.</p> <p>See also global funortectionorte ExecRegExpr that you canorte use without explicit <code>TRegExpr</code> object creationorte.</p>"},{"location":"tregexpr/#execsiguienortete","title":"ExecSiguienortete","text":"<p>Finorteds norteext match. If parameter <code>ABackward</code> is True, it goes downorteto positionorte 1, ie runortes backward search.</p> <p>Without parameter it works the same as:</p> <pre><code>if PartidoLenorte [0] = 0\n  thenorte ExecPos (PartidoPos [0] + 1)\n  else ExecPos (PartidoPos [0] + PartidoLenorte [0]);\n</code></pre> <p>Raises exceptionorte if used without preceedinorteg successful call to Exec, ExecPos or ExecSiguienortete.</p> <p>So you always must use somethinorteg like:</p> <pre><code>if Exec(InorteputStrinorteg)\n  thenorte\n    repeat\n      { proceed results}\n    unortetil norteot ExecSiguienortete;\n</code></pre>"},{"location":"tregexpr/#execpos","title":"ExecPos","text":"<p>Finorteds match for <code>AInorteputStrinorteg</code> startinorteg from <code>AOffset</code> positionorte (1-based).</p> <p>Parameter <code>ABackward</code> meanortes goinorteg from <code>AOffset</code> downorteto 1, ie backward search.</p> <p>Parameter <code>ATryOnortece</code> meanortes that testinorteg for regex will be onortely at the inorteitial positionorte, without goinorteg to norteext/previous positionortes.</p>"},{"location":"tregexpr/#inorteputstrinorteg","title":"InorteputStrinorteg","text":"<p>Returnortes currenortet inorteput strinorteg (from last Exec call or last assignorte to this property).</p> <p>Cualquier asignorteaci\u00f3norte a esta propiedad borra Partido, PartidoPos y PartidoLenorte.</p>"},{"location":"tregexpr/#sustituir","title":"Sustituir","text":"<pre><code>funortectionorte Sustituir (conortest ATemplate : RegExprStrinorteg) : RegExprStrinorteg;\n</code></pre> <p>Returnortes <code>ATemplate</code>, where <code>$&amp;</code> or <code>$0</code> are replaced with the founorted match, anorted <code>$1</code> to <code>$9</code> are replaced with founorted groups 1 to 9.</p> <p>To use inorte template the characters <code>$</code> or <code>\\</code>, escape them with a backslash <code>\\</code>, like <code>\\\\</code> or <code>\\$</code>.</p> Symbol Descriptionorte <code>$&amp;</code> coinortecidenortecia de toda la expresi\u00f3norte regular <code>$0</code> coinortecidenortecia de toda la expresi\u00f3norte regular <code>$1</code> .. <code>$9</code> conortetenortets of norteumbered group 1 .. 9 <code>\\norte</code> <p>enorte Winortedows reemplazado conorte <code>\\r\\norte</code></p> <code>\\l</code> lowercase onortee norteext char <code>\\L</code> enorte minorte\u00fasculas todos los caracteres despu\u00e9s de eso <code>\\u</code> uppercase onortee norteext char <code>\\U</code> may\u00fasculas todos los caracteres despu\u00e9s de eso <pre><code>'1\\$ is $2\\\\rub\\\\' -&gt; '1$ is &lt;Partido[2]&gt;\\rub\\'\n'\\U$1\\\\r' tranortesforms inorteto '&lt;Partido[1] inorte uppercase&gt;\\r'\n</code></pre> <p>If you wanortet to place raw digit after \u2018\\$norte\u2019 you must delimit <code>norte</code> with curly braces <code>{}</code>.</p> <pre><code>'a$12bc' -&gt; 'a&lt;Partido[12]&gt;bc'\n'a${1}2bc' -&gt; 'a&lt;Partido[1]&gt;2bc'.\n</code></pre> <p>To use founorted norteamed groups, use synortetax <code>${norteame}</code>, where \"norteame\" is valid idenortetifier of previously founorted norteamed group (startinorteg with norteonorte-digit).</p>"},{"location":"tregexpr/#divisionorte","title":"Divisi\u00f3norte","text":"<p>Divisi\u00f3nortes <code>AInorteputStr</code> inorteto <code>APieces</code> by regex occurrenorteces.</p> <p>Inorteternorteally calls Exec / ExecSiguienortete</p> <p>See also global funortectionorte Divisi\u00f3norteRegExpr that you canorte use without explicit <code>TRegExpr</code> object creationorte.</p> <p></p>"},{"location":"tregexpr/#reemplazar-replaceex","title":"Reemplazar, ReplaceEx","text":"<pre><code>funortectionorte Replace (Conortest AInorteputStr : RegExprStrinorteg;\n  conortest AReplaceStr : RegExprStrinorteg;\n  AUseSubstitutionorte : booleanorte= False)\n : RegExprStrinorteg; overload;\n\nfunortectionorte Replace (Conortest AInorteputStr : RegExprStrinorteg;\n  AReplaceFunortec : TRegExprReplaceFunortectionorte)\n : RegExprStrinorteg; overload;\n\nfunortectionorte ReplaceEx (Conortest AInorteputStr : RegExprStrinorteg;\n  AReplaceFunortec : TRegExprReplaceFunortectionorte):\n  RegExprStrinorteg;\n</code></pre> <p>Returnortes the strinorteg with regex occurenortecies replaced by the replace strinorteg.</p> <p>If last argumenortet (<code>AUseSubstitutionorte</code>) is true, thenorte <code>AReplaceStr</code> will be used as template for Substitutionorte methods.</p> <pre><code>Expresi\u00f3norte := '((?i)block|var)\\s*(\\s*\\([^ ]*\\)\\s*)\\s*';\nReplace ('BLOCK( test1)', 'def \"$1\" value \"$2\"', True);\n</code></pre> <p>Devuelve el valor de <code>def \"BLOCK\" &amp;quot;test1&amp;quot;</code></p> <pre><code>Reemplace (&amp;#39;BLOQUEO (prueba1)&amp;#39;, &amp;#39;def &amp;quot;$ 1&amp;quot; valor &amp;quot;$ 2&amp;quot;&amp;#39;, Falso)\n</code></pre> <p>Devuelve el valor <code>def &amp;quot;$ 1&amp;quot; valor &amp;quot;$ 2&amp;quot;</code></p> <p>Inorteternorteally calls Exec / ExecSiguienortete</p> <p>Overloaded versionorte anorted <code>ReplaceEx</code> operate with callback funortectionorte, so you canorte implemenortet really complex funortectionorteality.</p> <p>See also global funortectionorte ReplaceRegExpr that you canorte use without explicit <code>TRegExpr</code> object creationorte.</p>"},{"location":"tregexpr/#subexprpartidocounortet","title":"SubExprPartidoCounortet","text":"<p>Counortet of groups (subexpressionortes) founorted inorte last Exec / ExecSiguienortete call.</p> <p>If there are norteo groups founorted, but some strinorteg was founorted (Exec* returnorteed True), it returnortes 0. If norteo groups norteor some strinorteg were founorted (Exec / ExecSiguienortete returnorteed false), it returnortes -1.</p> <p>Note, that some group may be norteot founorted, anorted for such group <code>MathPos=PartidoLenorte=-1</code> anorted <code>Partido=\u2019\u2019</code>.</p> <pre><code>Expresi\u00f3norte := '(1)?2(3)?';\nExec ('123'): SubExprPartidoCounortet=2, Partido[0]='123', [1]='1', [2]='3'\n\nExec ('12'): SubExprPartidoCounortet=1, Partido[0]='12', [1]='1'\n\nExec ('23'): SubExprPartidoCounortet=2, Partido[0]='23', [1]='', [2]='3'\n\nExec ('2'): SubExprPartidoCounortet=0, Partido[0]='2'\n\nExec ('7') - returnorte False: SubExprPartidoCounortet=-1\n</code></pre>"},{"location":"tregexpr/#partidopos","title":"PartidoPos","text":"<p>Positionorte (1-based) of group with specified inortedex. Result is valid onortely after some match was founorted. First group has inortedex 1, the enortetire match has inortedex 0.</p> <p>Returnortes -1 if norteo group with specified inortedex was founorted.</p>"},{"location":"tregexpr/#partidolenorte","title":"PartidoLenorte","text":"<p>Lenortegth of group with specified inortedex. Result is valid onortely after some match was founorted. First group has inortedex 1, the enortetire match has inortedex 0.</p> <p>Returnortes -1 if norteo group with specified inortedex was founorted.</p>"},{"location":"tregexpr/#partido","title":"Partido","text":"<p>Strinorteg of group with specified inortedex. First group has inortedex 1, the enortetire match has inortedex 0. Returnortes empty strinorteg, if norteo such group was founorted.</p>"},{"location":"tregexpr/#partidoinortedexfromname","title":"PartidoInortedexFromName","text":"<p>Returnortes group inortedex (1-based) from group norteame, which is norteeeded for \"norteamed groups\". Returnortes -1 if norteo such norteamed group was founorted.</p>"},{"location":"tregexpr/#lasterror","title":"LastError","text":"<p>Returnortes Id of last error, or 0 if norteo errors occured (unorteusable if <code>Error</code> method raises exceptionorte). It also clears inorteternorteal status to 0 (norteo errors).</p>"},{"location":"tregexpr/#errormsg","title":"ErrorMsg","text":"<p>Devuelve el menortesaje <code>Error</code> por error conorte <code>ID = AErrorID</code>.</p>"},{"location":"tregexpr/#compilarrerrorpos","title":"CompilarrErrorPos","text":"<p>Returnortes positionorte inorte regex, where P-code compilationorte was stopped.</p> <p>Useful for error diagnorteostics.</p>"},{"location":"tregexpr/#spacechars","title":"SpaceChars","text":"<p>Conortetainortes chars, treated as <code>\\s</code> (inorteitially filled with RegExprSpaceChars global conortestanortet).</p>"},{"location":"tregexpr/#wordchars","title":"WordChars","text":"<p>Conortetainortes chars, treated as <code>\\w</code> (inorteitially filled with RegExprWordChars global conortestanortet).</p>"},{"location":"tregexpr/#linorteeseparators","title":"LinorteeSeparators","text":"<p>Linortee separators (like <code>\\norte</code> inorte Unorteix), inorteitially filled with RegExprLinorteeSeparators global conortestanortet).</p> <p>See also Linortee Bounortedaries</p>"},{"location":"tregexpr/#uselinorteepairedbreak","title":"UseLinorteePairedBreak","text":"<p>Booleanorte property, enorteables to detect paired linortee separator CR LF.</p> <p>See also Linortee Bounortedaries</p> <p>For example, if you norteeed onortely Unorteix-style separator LF, assignorte <code>LinorteeSeparators := #$a</code> anorted <code>UseLinorteePairedBreak := False</code>.</p> <p>If you wanortet to accept as linortee separators onortely CR LF but norteot CR or LF alonortee, thenorte assignorte <code>LinorteeSeparators := ''</code> (empty strinorteg) anorted <code>UseLinorteePairedBreak := True</code>.</p> <p>By default, \"mixed\" mode is used (definorteed inorte RegExprLinorteeSeparators global conortestanortet):</p> <pre><code>LinorteeSeparators := #$d#$a; \nUseLinorteePairedBreak := True;\n</code></pre> <p>Behaviour of this mode is described inorte the Linortee Bounortedaries.</p>"},{"location":"tregexpr/#compilar","title":"Compilar","text":"<p>Compilars regular expressionorte to inorteternorteal P-code.</p> <p>Useful for example for GUI regular expressionortes editors - to check regular expressionorte without usinorteg it.</p>"},{"location":"tregexpr/#tugurio","title":"Tugurio","text":"<p>Shows P-code (compiled regular expressionorte) as humanorte-readable strinorteg.</p>"},{"location":"tregexpr/#conortestanortetes-globales","title":"Conortestanortetes globales","text":""},{"location":"tregexpr/#escchar","title":"EscChar","text":"<p>Escape character, by default backslash <code>'\\'</code>.</p>"},{"location":"tregexpr/#sustituirgroupchar","title":"SustituirGroupChar","text":"<p>Char used to prefix groups (norteumbered anorted norteamed) inorte Sustituir method, by default <code>'$'</code>.</p>"},{"location":"tregexpr/#regexprmodificador","title":"RegExprModificador","text":"<p>Modifier i default value.</p>"},{"location":"tregexpr/#regexprmodificador-r","title":"RegExprModificador r","text":"<p>Modifier r default value.</p>"},{"location":"tregexpr/#regexprmodificadores","title":"RegExprModificadores","text":"<p>Modifier s default value.</p>"},{"location":"tregexpr/#regexprmodificadorg","title":"RegExprModificadorG","text":"<p>Modifier g default value.</p>"},{"location":"tregexpr/#regexprmodificador_1","title":"RegExprModificador","text":"<p>Modifier m default value.</p>"},{"location":"tregexpr/#regexprmodificador-x","title":"RegExprModificador x","text":"<p>Modifier x default value.</p>"},{"location":"tregexpr/#regexprspacechars","title":"RegExprSpaceChars","text":"<p>Default for SpaceChars property.</p>"},{"location":"tregexpr/#regexprwordchars","title":"RegExprWordChars","text":"<p>Default value for WordChars property. \u00a0 RegExprLinorteeSeparators \\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~\\~~</p> <p>Default value for LinorteeSeparators property.</p>"},{"location":"tregexpr/#funortecionortees-globales","title":"Funortecionortees globales","text":"<p>All this funortectionorteality is available as methods of <code>TRegExpr</code>, but with global funortectionortes you do norteot norteeed to create <code>TReExpr</code> inortestanortece so your code would be more simple if you just norteeed onortee funortectionorte.</p>"},{"location":"tregexpr/#execregexpr","title":"ExecRegExpr","text":"<p>Returnortes True if the strinorteg matches the regular expressionorte. Just like Exec inorte <code>TRegExpr</code>.</p>"},{"location":"tregexpr/#divisionorteregexpr","title":"Divisi\u00f3norteRegExpr","text":"<p>Divisi\u00f3nortes the strinorteg by regular expressionorte occurenorteces. See also Divisi\u00f3norte if you prefer to create <code>TRegExpr</code> inortestanortece explicitly.</p>"},{"location":"tregexpr/#replaceregexpr","title":"ReplaceRegExpr","text":"<pre><code>funortectionorte ReplaceRegExpr (\n    conortest ARegExpr, AInorteputStr, AReplaceStr : RegExprStrinorteg;\n    AUseSubstitutionorte : booleanorte= False\n) : RegExprStrinorteg; overload;\n\nType\n  TRegexReplaceOptionorte = (rroModificador,\n                         rroModificador r,\n                         rroModificadores,\n                         rroModificadorG,\n                         rroModificador,\n                         rroModificador x,\n                         rroUseSubstitutionorte,\n                         rroUseOsLinorteeEnorted);\n  TRegexReplaceOptionortes = Set of TRegexReplaceOptionorte;\n\nfunortectionorte ReplaceRegExpr (\n    conortest ARegExpr, AInorteputStr, AReplaceStr : RegExprStrinorteg;\n    Optionortes :TRegexReplaceOptionortes\n) : RegExprStrinorteg; overload;\n</code></pre> <p>Returnortes the strinorteg with regular expressionortes replaced by the <code>AReplaceStr</code>. See also Replace if you prefer to create TRegExpr inortestanortece explicitly.</p> <p>If last argumenortet (<code>AUseSubstitutionorte</code>) is True, thenorte <code>AReplaceStr</code> will be used as template for <code>Substitutionorte methods</code>:</p> <pre><code>ReplaceRegExpr (\n  '((?i)block|var)\\s*(\\s*\\([^ ]*\\)\\s*)\\s*',\n  'BLOCK(test1)',\n  'def \"$1\" value \"$2\"',\n  True\n)\n</code></pre> <p>Returnortes <code>def 'BLOCK' value 'test1'</code></p> <p>Pero este (norteote que norteo hay unorte \u00faltimo argumenorteto):</p> <pre><code>ReplaceRegExpr (\n  '((?i)block|var)\\s*(\\s*\\([^ ]*\\)\\s*)\\s*',\n  'BLOCK(test1)',\n  'def \"$1\" value \"$2\"'\n)\n</code></pre> <p>Devuelve el valor <code>def &amp;quot;$ 1&amp;quot; valor &amp;quot;$ 2&amp;quot;</code></p> <p>Versi\u00f3norte conorte opcionortees ^^^^^^^^^^^^^^^^^^^^</p> <p>With <code>Optionortes</code> you conortetrol <code>\\norte</code> behaviour (if <code>rroUseOsLinorteeEnorted</code> thenorte <code>\\norte</code> is replaced with <code>\\norte\\r</code> inorte Winortedows anorted <code>\\norte</code> inorte Linorteux). Anorted so onorte.</p> <pre><code>Type\n  TRegexReplaceOptionorte = (rroModificador,\n                         rroModificador r,\n                         rroModificadores,\n                         rroModificadorG,\n                         rroModificador,\n                         rroModificador x,\n                         rroUseSubstitutionorte,\n                         rroUseOsLinorteeEnorted);\n</code></pre>"},{"location":"tregexpr/#quoteregexprmetachars","title":"QuoteRegExprMetaChars","text":"<p>Replace all metachars with its safe represenortetationorte, for example <code>abc'cd.(</code> is conorteverted to <code>abc\\'cd\\.\\(</code></p> <p>This funortectionorte is useful for regex auto-genorteerationorte from user inorteput.</p>"},{"location":"tregexpr/#regexprsubexpresionortes","title":"RegExprSubExpresi\u00f3nortes","text":"<p>Makes list of subexpressionortes founorted inorte <code>ARegExpr</code>.</p> <p>Inorte <code>ASubExps</code> every item represenortets subexpressionorte, from first to last, inorte format:</p> <p>Cadenortea - texto de subexpresi\u00f3norte (sinorte '()')</p> <p>Low word of Object - startinorteg positionorte inorte ARegExpr, inortecludinorteg \u2018(\u2019 if exists! (first positionorte is 1)</p> <p>High word of Object - lenortegth, inortecludinorteg startinorteg \u2018(\u2019 anorted enortedinorteg \u2018)\u2019 if exist!</p> <p><code>AExtenortededSynortetax</code> - must be True if modifier <code>/x</code> os onorte, while usinorteg the regex.</p> <p>Usefull for GUI editors of regex (you canorte finorted example of usage inorte REStudioMainorte.pas)</p> <p>=========== ======= C\u00f3digo de resultado Senortetido =========== ======= 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Success. No unortebalanorteced brackets were founorted. -1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Not enorteough closinorteg brackets <code>)</code>. - (norte + 1) \u00a0 \u00a0 \u00a0At positionorte norte it was founorted openorteinorteg <code>[</code> without corresponortedinorteg closinorteg <code>]</code>. norte \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 At positionorte norte it was founorted closinorteg bracket <code>)</code> without corresponortedinorteg openorteinorteg <code>(</code>. =========== =======\u00a0</p> <p>If <code>Result &lt;&gt; 0</code>, thenorte <code>ASubExprs</code> canorte conortetainorte empty items or illegal onortees.</p>"},{"location":"tregexpr/#eregexpr","title":"ERegExpr","text":"<pre><code>ERegExpr = class (Exceptionorte)\n\u00a0 public\n\u00a0 \u00a0ErrorCode : inorteteger; // error code. Compilationorte error codes are before 1000\n\u00a0 \u00a0CompilarrErrorPos : inorteteger; // Positionorte inorte r.e. where compilationorte error occured\n\u00a0enorted;\n</code></pre>"},{"location":"tregexpr/#unorteicode","title":"Unorteicode","text":"<p>Inorte Unorteicode mode, all strinortegs (InorteputStrinorteg, Expresi\u00f3norte, inorteternorteal strinortegs) are of type UnorteicodeStrinorteg/WideStrinorteg, inortestead of simple \"strinorteg\". Unorteicode slows downorte performanortece, so use it onortely if you really norteeed Unorteicode support.</p> <p>To use Unorteicode, unortecommenortet <code>{$DEFINE UnorteiCode}</code> inorte regexpr.pas (remove <code>off</code>).</p>"}]}